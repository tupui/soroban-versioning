---
import Navbar from "../components/layout/Navbar.astro";
import Footer from "../components/layout/Footer.astro";
import { ViewTransitions } from "astro:transitions";
import { SEO } from "astro-seo";

import "../styles/global.css";

interface Props {
  title: string;
  page: string;
}

const { title, page } = Astro.props;
---

<script>
  import { Buffer } from "buffer";
  global.Buffer = Buffer;

  // Add these event listeners to handle the new button events
  document.addEventListener("astro:page-load", () => {
    // Handle Join Community button click
    window.addEventListener("openJoinCommunity", async () => {
      try {
        const container = document.createElement("div");
        document.body.appendChild(container);

        const [{ default: React }, { createRoot }] = await Promise.all([
          import("react"),
          import("react-dom/client"),
        ]);

        const { default: JoinCommunityModal } = await import(
          "components/page/dashboard/JoinCommunityModal.tsx"
        );

        const root = createRoot(container);
        const handleClose = () => {
          root.unmount();
          document.body.removeChild(container);
        };

        root.render(
          React.createElement(JoinCommunityModal, {
            onClose: handleClose,
            onJoined: () => {
              // Trigger wallet connected to refresh UI
              const publicKey = localStorage.getItem("publicKey");
              if (publicKey) {
                window.dispatchEvent(
                  new CustomEvent("walletConnected", { detail: publicKey })
                );
              }
            },
          })
        );
      } catch (e) {
        console.error("Error opening join community modal:", e);
      }
    });

    // Handle Profile button click
    window.addEventListener("openProfileModal", async () => {
      try {
        const publicKey = localStorage.getItem("publicKey");
        if (!publicKey) return;

        const container = document.createElement("div");
        document.body.appendChild(container);

        const [{ default: React }, { createRoot }] = await Promise.all([
          import("react"),
          import("react-dom/client"),
        ]);

        const [{ default: MemberProfileModal }, { getMember }] = await Promise.all([
          import("components/page/dashboard/MemberProfileModal.tsx"),
          import("@service/ReadContractService")
        ]);

        const root = createRoot(container);
        const handleClose = () => {
          root.unmount();
          document.body.removeChild(container);
        };

        try {
          const memberData = await getMember(publicKey);
          
          root.render(
            React.createElement(MemberProfileModal, {
              member: memberData,
              onClose: handleClose,
            })
          );
        } catch (e) {
          console.error("Error fetching member data:", e);
          // If member doesn't exist, open join community modal instead
          window.dispatchEvent(new CustomEvent("openJoinCommunity"));
          handleClose();
        }
      } catch (e) {
        console.error("Error opening profile modal:", e);
      }
    });
  });
</script>

<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width" />
    <link rel="icon" type="image/svg+xml" href="/logo.svg" />
    <meta name="generator" content={Astro.generator} />
    <link
      href="https://fonts.googleapis.com/css2?family=Space+Grotesk:wght@300..700&display=swap"
      rel="stylesheet"
    />
    <ViewTransitions />

    <SEO
      title={title}
      description="Bringing open source software development onto the Stellar blockchain"
      nofollow={true}
      openGraph={{
        basic: {
          title: title,
          type: "website",
          image: "https://testnet.tansu.dev/logo.svg",
        },
      }}
      extend={{
        // extending the default link tags
        link: [{ rel: "icon", href: "/logo.svg" }],
        // extending the default meta tags
        meta: [
          { name: "x:creator", content: "@PamphileRoy" },
          { name: "x:card", content: "summary_large_image" },
          {
            name: "x:image",
            content: "https://testnet.tansu.dev/logo.svg",
          },
          { name: "x:title", content: "Tansu" },
          {
            name: "x:description",
            content:
              "Bringing open source software development onto the Stellar blockchain",
          },
        ],
      }}
    />
  </head>
  <body class="font-firacode min-h-screen flex flex-col">
    <img
      src="/logo-background.png"
      alt="background"
      class="background-image hidden md:block"
    />
    <Navbar page={page} />
    <slot />
    <Footer />
  </body>
</html>
