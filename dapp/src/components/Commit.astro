---
import Topic from "./utils/Topic.astro";
import Loading from "./utils/Loading.astro";
import PrimaryButton from "./utils/PrimaryButton.astro";
---

<div id="update-commit-section" class="hidden">
  <div class="relative flex flex-col items-center md:flex-row">
    <Topic title="Commit" description="Update hash on-chain" />
  </div>

  <div
    class="relative flex flex-col items-center md:flex-row my-6 bg-zinc-100 rounded-3xl sm:rounded-[45px]"
  >
    <div
      class="row items-center py-8 sm:py-12 px-6 sm:px-12 md:px-20 w-full md:w-8/12 md:py-10"
    >
      <div class="space-y-8 md:w-full">
        <label class="block mb-2 text-base font-medium text-black">
          Commit hash
          <input
            type="text"
            id="commit_hash"
            name="commit_hash"
            class="block p-3 w-full text-base text-black bg-white rounded-lg border shadow-sm focus:ring-black focus:border-black"
            placeholder="Last commit hash"
            required
            minlength="64"
            maxlength="64"
          />
        </label>
        <PrimaryButton
          wrapId="wrap-commit-button"
          dataAttr="data-commit-hash"
          ariaControls="commit-hash"
          buttonText="Commit on-chain"
        />
      </div>
      <div id="wrap-commit-loader" class="hidden">
        <Loading />
      </div>
    </div>
  </div>
</div>

<script>
  import { commitHash } from "../service/WriteContractService";
  import { loadProjectInfo } from "../service/StateService";
  import { loadedPublicKey } from "./stellar-wallets-kit";
  import { latestCommit, projectInfoLoaded } from "../utils/store";

  document.addEventListener("astro:page-load", () => {
    function updateCommitSectionVisibility() {
      const projectInfo = loadProjectInfo();
      
      if (projectInfo) {
        const connectedPublicKey = loadedPublicKey();
        const isMaintainer = connectedPublicKey
        ? projectInfo.maintainers.includes(connectedPublicKey)
        : false;
        const updateCommitSection = document.getElementById(
          "update-commit-section",
        );
        if (updateCommitSection) {
          updateCommitSection.classList.toggle("hidden", !isMaintainer);
        }
      }
    }
    
    // Call the function when the page loads
    projectInfoLoaded.subscribe((loaded) => {
      if (loaded) {
        updateCommitSectionVisibility();
      }
    });

    const commit_hash = document.getElementById(
      "commit_hash",
    ) as HTMLInputElement;

    // Subscribe to latestCommit changes
    latestCommit.subscribe((value) => {
      if (commit_hash) {
        commit_hash.value = value;
      }
    });

    const wrap_loader = document.getElementById(
      "wrap-commit-loader",
    ) as HTMLDivElement;
    const wrap_button = document.getElementById(
      "wrap-commit-button",
    ) as HTMLDivElement;
    const button = document.querySelector(
      "[data-commit-hash]",
    ) as HTMLButtonElement;

    async function handleCommit() {
      wrap_loader.style.display = "block";
      wrap_button.style.display = "none";
      try {
        const commit_status = await commitHash(commit_hash.value);

        wrap_loader.style.display = "none";
        wrap_button.style.display = "block";
        if (!commit_status) {
          alert("Hash could not be committed! Please retry.");
        } else {
          wrap_button.innerHTML = "Hash committed!";
        }
      } catch (e) {
        console.error(e);
      }
    }

    if (button) {
      button.addEventListener("click", handleCommit);
    }

    if (commit_hash) {
      commit_hash.addEventListener("keypress", (event) => {
        if (event.key === "Enter") {
          event.preventDefault();
          handleCommit();
        }
      });
    }

    // Add event listener for wallet connection
    window.addEventListener("walletConnected", updateCommitSectionVisibility);
  });
</script>
