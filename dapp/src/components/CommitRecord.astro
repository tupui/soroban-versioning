---
interface Props {
  message: string;
  date: string;
  authorName: string;
  authorGithubLink: string;
  sha: string;
  commitLink: string;
}

const { message, date, authorName, authorGithubLink, sha, commitLink } = Astro.props;

import { formatTime } from '../service/utils';

const formattedMessage = message.split(/\r?\n/).map(line => line.trim()).filter(Boolean);
const firstLine = formattedMessage[0];
const hasMoreLines = formattedMessage.length > 1;
---

<div class="commit-record bg-white p-4 rounded-lg border border-gray-200 shadow-sm flex justify-between items-start">
  <div class="commit-info flex-grow overflow-hidden mr-4">
    <div class="flex items-center">
      <a href={commitLink} target="_blank" rel="noopener noreferrer" class="commit-message text-lg font-medium hover:underline hover:text-blue-500 truncate">{firstLine}</a>
      {hasMoreLines && (
        <button class="expand-button ml-2 text-xs bg-zinc-200 hover:bg-zinc-300 text-gray-700 font-semibold py-1 px-2 rounded-md transition-colors duration-200 flex-shrink-0">
          . . .
        </button>
      )}
    </div>
    {hasMoreLines && (
      <div class="expanded-message hidden mt-2 text-sm text-gray-700 whitespace-pre-wrap">{formattedMessage.slice(1).join('\n')}</div>
    )}
    <div class="commit-details text-sm text-gray-600 mt-1">
      <a href={authorGithubLink} target="_blank" rel="noopener noreferrer" class="author-name font-semibold hover:underline hover:text-blue-500">{authorName}</a>
      <span class="mx-1">committed on</span>
      <span class="commit-date">{formatTime(date)}</span>
    </div>
  </div>
  <div class="commit-sha flex items-center space-x-2 flex-shrink-0">
    <a href={commitLink} target="_blank" rel="noopener noreferrer" class="sha text-sm font-mono text-gray-500 hover:bg-zinc-400 transition-colors duration-200 px-2 py-1 rounded">{sha.substring(0, 7)}</a>
    <button class="copy-button hover:bg-zinc-400 transition-colors duration-200 p-1 rounded" data-sha={sha}>
      <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-5 h-5 text-gray-400 hover:text-gray-600">
        <path stroke-linecap="round" stroke-linejoin="round" d="M15.666 3.888A2.25 2.25 0 0013.5 2.25h-3c-1.03 0-1.9.693-2.166 1.638m7.332 0c.055.194.084.4.084.612v0a.75.75 0 01-.75.75H9a.75.75 0 01-.75-.75v0c0-.212.03-.418.084-.612m7.332 0c.646.049 1.288.11 1.927.184 1.1.128 1.907 1.077 1.907 2.185V19.5a2.25 2.25 0 01-2.25 2.25H6.75A2.25 2.25 0 014.5 19.5V6.257c0-1.108.806-2.057 1.907-2.185a48.208 48.208 0 011.927-.184" />
      </svg>
    </button>
  </div>
</div>

<script>
  function setupCopyButton(button: HTMLButtonElement) {
    button.addEventListener('click', async () => {
      const sha = button.getAttribute('data-sha');
      if (sha) {
        try {
          await navigator.clipboard.writeText(sha);
          const svg = button.querySelector('svg');
          if (svg) {
            svg.classList.remove('text-gray-400', 'hover:text-gray-600');
            svg.classList.add('text-green-500');
            svg.innerHTML = `
              <path stroke-linecap="round" stroke-linejoin="round" d="M4.5 12.75l6 6 9-13.5" />
            `;
          }
          setTimeout(() => {
            if (svg) {
              svg.classList.remove('text-green-500');
              svg.classList.add('text-gray-400', 'hover:text-gray-600');
              svg.innerHTML = `
                <path stroke-linecap="round" stroke-linejoin="round" d="M15.666 3.888A2.25 2.25 0 0013.5 2.25h-3c-1.03 0-1.9.693-2.166 1.638m7.332 0c.055.194.084.4.084.612v0a.75.75 0 01-.75.75H9a.75.75 0 01-.75-.75v0c0-.212.03-.418.084-.612m7.332 0c.646.049 1.288.11 1.927.184 1.1.128 1.907 1.077 1.907 2.185V19.5a2.25 2.25 0 01-2.25 2.25H6.75A2.25 2.25 0 014.5 19.5V6.257c0-1.108.806-2.057 1.907-2.185a48.208 48.208 0 011.927-.184" />
              `;
            }
          }, 2000);
        } catch (err) {
          console.error('Failed to copy: ', err);
        }
      }
    });
  }

  function setupExpandButtons() {
    const expandButtons = document.querySelectorAll('.expand-button');
    expandButtons.forEach(button => {
      button.addEventListener('click', () => {
        const record = button.closest('.commit-record');
        const expandedMessage = record?.querySelector('.expanded-message');
        if (expandedMessage) {
          expandedMessage.classList.toggle('hidden');
          button.textContent = expandedMessage.classList.contains('hidden') ? '. . .' : 'Less';
        }
      });
    });
  }

  document.addEventListener('astro:page-load', () => {
    const copyButtons = document.querySelectorAll('.copy-button');
    copyButtons.forEach(button => setupCopyButton(button as HTMLButtonElement));
    setupExpandButtons();
  });
</script>

