---
import Topic from "./utils/Topic.astro";
import Loading from "./utils/Loading.astro";
import ModalInput from "./utils/ModalInput.astro";
---

<div class="relative flex flex-col items-center md:flex-row">
  <Topic title="Register" description="Register a new project on-chain" />
</div>

<div
  class="relative flex flex-col items-center lg:flex-row my-6 bg-zinc-100 rounded-[45px]"
>
  <div
    class="row items-center py-12 px-4 sm:px-12 md:px-20 md:py-10 w-full lg:w-8/12 max-w-[680px] lg:max-w-none"
  >
    <div class="space-y-8 lg:w-full">
      <label class="block mb-2 text-base font-medium text-black relative">
        Project
        <ModalInput
          id="project_name"
          name="project_name"
          placeholder="Project name (lowercase, only chars)"
          required
          minlength="4"
          maxlength="15"
          onkeyup="this.value=this.value.replace(/[^a-z]/g,'');"
        />
        <span
          id="project_name_error"
          class="text-orange-500 hidden absolute left-0 top-full text-sm"
          >Invalid project name</span
        >
      </label>
      <label class="block mb-2 text-base font-medium text-black relative">
        Maintainers
        <ModalInput
          id="maintainers"
          name="maintainers"
          placeholder="List of maintainers' addresses as G...,G..."
          required
        />
        <span
          id="maintainers_error"
          class="text-orange-500 hidden absolute left-0 top-full text-sm"
          >Invalid maintainers</span
        >
      </label>
      <label class="block mb-2 text-base font-medium text-black relative">
        GitHub repository URL
        <ModalInput
          id="config_url"
          name="config_url"
          placeholder="GitHub repository URL"
          required
        />
        <span
          id="config_url_error"
          class="text-orange-500 hidden absolute left-0 top-full text-sm"
          >Invalid GitHub URL</span
        >
      </label>
      <label class="block mb-2 text-base font-medium text-black relative">
        Information file hash
        <ModalInput
          id="config_hash"
          name="config_hash"
          placeholder="Information file hash"
          required
          minlength="64"
          maxlength="64"
        />
        <span
          id="config_hash_error"
          class="text-orange-500 hidden absolute left-0 top-full text-sm"
          >Invalid file hash</span
        >
      </label>

      <div id="wrap-register-button">
        <button
          data-register-project
          aria-controls="register-project"
          class="w-full py-5 bg-zinc-900 rounded-[14px] justify-center gap-2.5 inline-flex"
        >
          <span class="text-center text-white text-xl font-normal leading-7"
            >Register on-chain</span
          >
        </button>
      </div>
    </div>
    <div id="wrap-register-loader" class="hidden">
      <Loading />
    </div>
  </div>
</div>

<script>
  import {
    getProject,
    getProjectFromName,
    getProjectHash,
  } from "../service/ReadContractService";
  import {
    initializeProjectState,
    loadProjectName,
    setConfigData,
    setProject,
    setProjectLatestSha,
    setProjectRepoInfo,
  } from "../service/StateService";
  import { registerProject } from "../service/WriteContractService";
  import { navigate } from "astro:transitions/client";
  import { getAuthorRepo } from "../utils/editLinkFunctions";
  import { fetchTOMLFromConfigUrl } from "../service/GithubService";
  import { extractConfigData } from "../utils/utils";
  const SOROBAN_DOMAIN_CONTRACT_ID = `${import.meta.env.PUBLIC_SOROBAN_DOMAIN_CONTRACT_ID}`;

  document.addEventListener("astro:page-load", () => {
    initializeProjectState();
    const project_name = document.getElementById(
      "project_name",
    ) as HTMLInputElement;

    const maintainers = document.getElementById(
      "maintainers",
    ) as HTMLInputElement;

    const config_url = document.getElementById(
      "config_url",
    ) as HTMLInputElement;
    const config_hash = document.getElementById(
      "config_hash",
    ) as HTMLInputElement;

    const wrap_loader = document.getElementById(
      "wrap-register-loader",
    ) as HTMLDivElement;
    const wrap_button = document.getElementById(
      "wrap-register-button",
    ) as HTMLDivElement;
    const button = document.querySelector(
      "[data-register-project]",
    ) as HTMLButtonElement;

    project_name.value = loadProjectName() || "";

    const project_name_error = document.getElementById(
      "project_name_error",
    ) as HTMLSpanElement;
    const maintainers_error = document.getElementById(
      "maintainers_error",
    ) as HTMLSpanElement;
    const config_url_error = document.getElementById(
      "config_url_error",
    ) as HTMLSpanElement;
    const config_hash_error = document.getElementById(
      "config_hash_error",
    ) as HTMLSpanElement;

    function showError(
      input: HTMLInputElement,
      errorSpan: HTMLSpanElement,
      message: string,
    ) {
      errorSpan.textContent = message;
      errorSpan.classList.remove("hidden");
      input.style.border = "2px solid red";
      setTimeout(() => {
        errorSpan.classList.add("hidden");
        input.style.border = "";
      }, 5000);
    }

    function isValidGithubUrl(url: string) {
      return /^https:\/\/github\.com\/[^\/]+\/[^\/]+$/.test(url);
    }

    if (button) {
      button.addEventListener("click", async () => {
        wrap_loader.style.display = "block";
        wrap_button.style.display = "none";

        let isValid = true;

        // Check project name
        const project = await getProjectFromName(project_name.value);
        if (project && project.name && project.name === project_name.value) {
          isValid = false;
          showError(
            project_name,
            project_name_error,
            "Project name already registered",
          );
        }

        // Check maintainers
        if (!maintainers.value.trim()) {
          isValid = false;
          showError(
            maintainers,
            maintainers_error,
            "Maintainers cannot be empty",
          );
        } else {
          const addressList = maintainers.value
            .split(",")
            .map((addr) => addr.trim());
          const invalidAddresses = addressList.filter(
            (addr) => !addr.startsWith("G") || addr.length !== 56,
          );
          if (invalidAddresses.length > 0) {
            isValid = false;
            showError(
              maintainers,
              maintainers_error,
              "Invalid maintainer address(es). Each address should start with 'G' and be 56 characters long.",
            );
          }
        }

        // Check GitHub URL
        if (!isValidGithubUrl(config_url.value)) {
          isValid = false;
          showError(
            config_url,
            config_url_error,
            "Invalid GitHub repository URL",
          );
        }

        // Check file hash
        if (config_hash.value.length !== 64) {
          isValid = false;
          showError(
            config_hash,
            config_hash_error,
            "File hash must be 64 characters long",
          );
        }

        if (!isValid) {
          wrap_loader.style.display = "none";
          wrap_button.style.display = "block";
          return;
        }

        // If all checks pass, proceed with registration
        const register_status = await registerProject(
          project_name.value,
          maintainers.value,
          config_url.value,
          config_hash.value,
          SOROBAN_DOMAIN_CONTRACT_ID,
        );

        wrap_loader.style.display = "none";
        wrap_button.style.display = "block";
        if (!register_status) {
          alert("Project could not be registered! Please retry.");
        } else {
          const project = await getProject();
          if (
            project &&
            project.name &&
            project.config &&
            project.maintainers
          ) {
            setProject(project);
            const { username, repoName } = getAuthorRepo(project.config.url);
            if (username && repoName) {
              setProjectRepoInfo(username, repoName);
            }
            const tomlData = await fetchTOMLFromConfigUrl(project.config.url);
            if (tomlData) {
              const configData = extractConfigData(tomlData, project.name);
              setConfigData(configData);
            } else {
              setConfigData({});
            }

            const latestSha = await getProjectHash();
            if (
              typeof latestSha === "string" &&
              latestSha.match(/^[a-f0-9]{40}$/)
            ) {
              setProjectLatestSha(latestSha);
            } else setProjectLatestSha("");

            navigate(`/project?name=${project.name}`);
          }
        }
      });
    }
  });
</script>
