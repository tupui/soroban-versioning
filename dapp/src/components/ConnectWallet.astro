<div id="connect-wrap" aria-live="polite" class="relative">
  <div
    id="get-started"
    class="absolute hidden top-6 -left-16 xl:flex flex-col gap-2 transform -rotate-[13deg]"
    aria-hidden="true"
  >
    <img
      src="/arrow.svg"
      alt="Arrow pointing to connect button"
      class="w-[56px] h-[69px]"
      width="56"
      height="69"
    />
    <p class="text-victormono text-lg italic text-zinc-700 text-nowrap">
      Get Started
    </p>
  </div>
  <button
    data-connect
    aria-controls="connect-wrap"
    aria-label="Connect wallet to start using Tansu"
    class="h-8 md:h-10 lg:h-12 px-3 md:px-4 lg:px-6 flex justify-center items-center gap-1 md:gap-2 bg-white shadow-button truncate focus:outline-none focus:ring-2 focus:ring-primary focus:ring-offset-2 transition-all duration-200"
  >
    <span
      class="text-xs md:text-sm lg:text-base font-medium text-pink truncate"
    >
      Connect
    </span>
    <img
      src="/icons/connect.png"
      alt="Connect wallet icon"
      class="w-3 md:w-4 lg:w-5 h-3 md:h-4 lg:h-5 flex-shrink-0"
      width="20"
      height="20"
    />
  </button>
</div>

<script>
  import { connectedPublicKey } from "utils/store";
  import {
    initializeConnection,
    loadedPublicKey,
    setConnection,
    disconnect,
    loadedProvider,
  } from "../service/walletService";

  document.addEventListener("astro:page-load", () => {
    initializeConnection();

    const button = document.querySelector(
      "[data-connect]",
    ) as HTMLButtonElement;

    async function setLoggedIn(publicKey: string) {
      button.textContent = "";

      const textElement = document.createElement("span");
      textElement.className = "hidden sm:inline text-xs md:text-sm lg:text-base font-medium text-white truncate";
      textElement.textContent = "Profile";

      const imgElement = document.createElement("img");
      imgElement.src = "/icons/profile.svg";
      imgElement.alt = "User profile icon";
      imgElement.className = "w-4 md:w-5 h-4 md:h-5 flex-shrink-0";
      imgElement.setAttribute("width", "20");
      imgElement.setAttribute("height", "20");

      button.appendChild(textElement);
      button.appendChild(imgElement);
      button.title = publicKey;
      button.setAttribute("aria-label", "Open user profile");

      button.classList.remove("bg-white");
      button.classList.add("bg-primary", "text-white", "hover:opacity-90", "transition-opacity", "cursor-pointer");

      button.onclick = () => {
        window.dispatchEvent(new CustomEvent("openProfileModal"));
      };
    }

    const publicKey = loadedPublicKey();
    if (publicKey) setLoggedIn(publicKey);

    async function connectWallet() {
      const provider = loadedProvider();

      if (button.title) {
        // Already connected - revalidate account with provider
        if (provider) {
          const { kit } = await import("./stellar-wallets-kit");
          kit.setWallet(provider);

          try {
            const { address } = await kit.getAddress();
            const currentStored = loadedPublicKey();

            if (address !== currentStored) {
              //  User switched accounts inside this wallet
              setConnection(address, provider);
              await setLoggedIn(address);
              window.dispatchEvent(
                new CustomEvent("walletSwitched", {
                  detail: { address, provider },
                }),
              );
            }
          } catch {
            // Wallet not available or user rejected
            disconnect();
          }
        } else {
          // No provider stored, force reconnect flow
          window.dispatchEvent(new CustomEvent("openProfileModal"));
        }
        return;
      }

      // First-time connection flow
      try {
        const { kit } = await import("./stellar-wallets-kit");
        await kit.openModal({
          onWalletSelected: async (option: { id: string }) => {
            try {
              kit.setWallet(option.id);
              const { address } = await kit.getAddress();

              // Save both provider + key
              setConnection(address, option.id);
              await setLoggedIn(address);

              window.dispatchEvent(
                new CustomEvent("walletConnected", {
                  detail: { address, provider: option.id },
                }),
              );
            } catch {
              // Wallet connection failed - user might have rejected or wallet unavailable
              // This is expected behavior, no need to log
            }
          },
        });
      } catch {
        // Wallet modal opening failed - this is expected behavior for some cases
        // No need to log as it's handled gracefully by the UI
      }
    }

    button.addEventListener("click", connectWallet);

    const getStarted = document.querySelector("#get-started");
    connectedPublicKey.subscribe((publicKey) => {
      if (publicKey) getStarted?.classList.remove("xl:flex");
    });

    // Handle disconnect
    window.addEventListener("walletDisconnected", () => {
      disconnect();
      button.textContent = "";

      const textElement = document.createElement("span");
      textElement.className = "text-xs md:text-sm lg:text-base font-medium text-pink truncate";
      textElement.textContent = "Connect";

      const imgElement = document.createElement("img");
      imgElement.src = "/icons/connect.png";
      imgElement.alt = "Connect wallet icon";
      imgElement.className = "w-3 md:w-4 lg:w-5 h-3 md:h-4 lg:h-5 flex-shrink-0";
      imgElement.setAttribute("width", "20");
      imgElement.setAttribute("height", "20");

      button.appendChild(textElement);
      button.appendChild(imgElement);
      button.title = "";
      button.setAttribute("aria-label", "Connect wallet to start using Tansu");

      button.classList.add("bg-white");
      button.classList.remove("bg-primary", "text-white");
    });

    // Restore provider on reload
    const provider = loadedProvider();
    if (provider) {
      import("./stellar-wallets-kit").then(({ kit }) => {
        kit.setWallet(provider);
      });
    }
  });
</script>



