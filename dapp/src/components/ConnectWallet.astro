<div id="connect-wrap" aria-live="polite" class="relative">
  <div
    id="get-started"
    class="absolute hidden top-6 -left-16 xl:flex flex-col gap-2 transform -rotate-[13deg]"
    aria-hidden="true"
  >
    <img
      src="/arrow.svg"
      alt="Arrow pointing to connect button"
      class="w-[56px] h-[69px]"
      width="56"
      height="69"
    />
    <p class="text-victormono text-lg italic text-zinc-700 text-nowrap">
      Get Started
    </p>
  </div>
  <button
    data-connect
    aria-controls="connect-wrap"
    aria-label="Connect wallet to start using Tansu"
    class="h-8 md:h-10 lg:h-12 px-3 md:px-4 lg:px-6 flex justify-center items-center gap-1 md:gap-2 bg-white shadow-button truncate focus:outline-none focus:ring-2 focus:ring-primary focus:ring-offset-2 transition-all duration-200"
  >
    <span
      class="text-xs md:text-sm lg:text-base font-medium text-pink truncate"
    >
      Connect
    </span>
    <img
      src="/icons/connect.png"
      alt="Connect wallet icon"
      class="w-3 md:w-4 lg:w-5 h-3 md:h-4 lg:h-5 flex-shrink-0"
      width="20"
      height="20"
    />
  </button>
</div>

<div id="wallet-modal-root"></div>

<script>
  import { connectedPublicKey } from "utils/store";
  import {
    initializeConnection,
    loadedPublicKey,
    setPublicKey,
    disconnect,
  } from "../service/walletService";

  document.addEventListener("astro:page-load", () => {
    initializeConnection();
    const button = document.querySelector(
      "[data-connect]",
    ) as HTMLButtonElement;

    async function setLoggedIn(publicKey: string) {
      button.textContent = "";
      const textElement = document.createElement("span");
      textElement.className =
        "hidden sm:inline text-xs md:text-sm lg:text-base font-medium text-white truncate";
      textElement.textContent = "Profile";
      const imgElement = document.createElement("img");
      imgElement.src = "/icons/profile.svg";
      imgElement.alt = "User profile icon";
      imgElement.className = "w-4 md:w-5 h-4 md:h-5 flex-shrink-0";
      imgElement.setAttribute("width", "20");
      imgElement.setAttribute("height", "20");
      button.appendChild(textElement);
      button.appendChild(imgElement);
      button.title = publicKey;
      button.setAttribute("aria-label", "Open user profile");
      button.classList.toggle("bg-white", false);
      button.classList.toggle("bg-primary", true);
      button.classList.toggle("text-white", true);
      button.classList.toggle("hover:opacity-90", true);
      button.classList.toggle("transition-opacity", true);
      button.classList.toggle("cursor-pointer", true);

      button.onclick = () => {
        window.dispatchEvent(new CustomEvent("openProfileModal"));
      };
    }

    const publicKey = loadedPublicKey();
    if (publicKey) {
      setLoggedIn(publicKey);
    }

    let isModalOpen = false;

    async function connectWallet() {
      if (button.title) {
        window.dispatchEvent(new CustomEvent("openProfileModal"));
        return;
      }

      if (isModalOpen) return;
      isModalOpen = true;
      const { createElement } = await import("react");
      const { createRoot } = await import("react-dom/client");
      const { NetworkProvider } = await import("../contexts/NetworkContext");
      const WalletConnectModal = await import("./WalletConnectModal");

      const modalRoot = document.getElementById("wallet-modal-root");
      if (!modalRoot) return;

      const root = createRoot(modalRoot);

      const handleConnect = async (
        network: "mainnet" | "testnet",
        walletId: string,
      ) => {
        try {
          localStorage.setItem("network", network);
          const { getKit } = await import("./stellar-wallets-kit");

          const kit = getKit();
          kit.setWallet(walletId);
          const { address } = await kit.getAddress();
          setPublicKey(address);
          await setLoggedIn(address);
          window.dispatchEvent(
            new CustomEvent("walletConnected", { detail: address }),
          );

          window.location.reload();
        } catch (e) {
          console.error("Wallet connection failed:", e);
        }
      };

      const handleClose = () => {
        isModalOpen = false;
        root.unmount();
      };

      root.render(
        createElement(
          NetworkProvider,
          {},
          createElement(WalletConnectModal.default, {
            isOpen: true,
            onClose: handleClose,
            onConnect: handleConnect,
          }),
        ),
      );
    }

    if (button) {
      button.addEventListener("click", connectWallet);
    }

    const getStarted = document.querySelector("#get-started");
    connectedPublicKey.subscribe((publicKey) => {
      if (publicKey) {
        getStarted?.classList.remove("xl:flex");
      }
    });

    window.addEventListener("walletDisconnected", () => {
      disconnect();
      button.textContent = "";
      const textElement = document.createElement("span");
      textElement.className =
        "text-xs md:text-sm lg:text-base font-medium text-pink truncate";
      textElement.textContent = "Connect";
      const imgElement = document.createElement("img");
      imgElement.src = "/icons/connect.png";
      imgElement.alt = "Connect wallet icon";
      imgElement.className =
        "w-3 md:w-4 lg:w-5 h-3 md:h-4 lg:w-5 flex-shrink-0";
      imgElement.setAttribute("width", "20");
      imgElement.setAttribute("height", "20");
      button.appendChild(textElement);
      button.appendChild(imgElement);
      button.title = "";
      button.setAttribute("aria-label", "Connect wallet to start using Tansu");
      button.classList.toggle("bg-white", true);
      button.classList.toggle("bg-primary", false);
      button.classList.toggle("text-white", false);
    });
  });
</script>
