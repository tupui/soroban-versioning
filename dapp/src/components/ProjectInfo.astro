---
import Topic from "./utils/Topic.astro";
import Modal from "./utils/Modal.astro";
import Loading from "./utils/Loading.astro";
import CommitHistory from "./CommitHistory.jsx";
import PrimaryButton from "./utils/PrimaryButton.astro";
import ModalInput from "./utils/ModalInput.astro";
---

<div class="relative flex flex-col items-center md:flex-row justify-between">
  <Topic
    title="Project"
    description="Details about the project"
    id="project-name-topic"
  />
  <div id="open-update-config-modal-button" class="mb-1.5 mt-12 pr-3 hidden">
    <PrimaryButton
      wrapId="wrap-update-config"
      dataAttr="data-update-config"
      ariaControls="update-config-modal"
      buttonText="Update Config"
    />
  </div>
</div>

<div
  class="relative flex flex-col items-center md:flex-row my-6 bg-zinc-100 rounded-3xl sm:rounded-[45px]"
>
  <div
    class="row items-center py-8 sm:py-12 px-4 sm:px-8 md:px-20 w-full md:py-10"
  >
    <div class="space-y-6 md:w-full">
      <div id="project-name" class="flex items-end space-x-2">
        <p id="project-name-value" class="text-2xl sm:text-4xl font-bold"></p>
      </div>

      <div class="flex flex-col md:flex-row gap-6">
        <img
          id="project-thumbnail"
          src="/fallback-image.jpg"
          alt="Project Thumbnail"
          class="w-full md:w-[40%] object-cover rounded-lg"
        />
        <div class="flex-1 pt-2">
          <p id="project-description" class="flex-1 text-base sm:text-lg">description</p>
        </div>
      </div>

      <div class="grid grid-cols-1 sm:grid-cols-2">
        <div id="project-maintainers" class="space-y-1">
          <h3 class="text-base sm:text-lg md:text-2xl font-semibold">Maintainers</h3>
          <ul class="list-disc list-outside pl-5"></ul>
        </div>
        <div id="project-organization" class="space-y-1">
          <h3 class="text-base sm:text-lg md:text-2xl font-semibold">Organization</h3>
          <p id="project-organization-name" class=""></p>
        </div>
      </div>

      <div class="grid grid-cols-1 sm:grid-cols-2">
        <div id="project-links">
          <div class="hidden sm:block space-y-2">
            <div class="flex flex-col">
              <h3 class="text-base sm:text-lg md:text-2xl font-semibold mb-2">Official Links</h3>
              <div id="official-links" class="flex flex-wrap gap-x-2 min-h-7"></div>
            </div>
      
            <div class="flex flex-col">
              <h3 class="text-base sm:text-lg md:text-2xl font-semibold mb-2">Social</h3>
              <div id="social-links" class="flex flex-wrap gap-x-2 min-h-7"></div>
            </div>
          </div>
          <div id="links" class="sm:hidden mb-4 flex gap-2 items-center"></div>
        </div>

        <div>
          <div class="flex flex-col">
            <h3 class="text-base sm:text-lg md:text-2xl font-semibold mb-2">Syncronize status</h3>
            <div id="project-sync-status" class="flex flex-wrap gap-2 min-h-7"></div>
          </div>
          <div>
            <div class="min-h-7"></div>
            <div class="flex flex-col sm:flex-row sm:flex-wrap items-start sm:items-center sm:gap-x-4">
              <div
                id="view-commit-history"
                class="flex items-center space-x-2 cursor-pointer hover:bg-zinc-300 transition-colors duration-300 rounded-lg px-2 py-1"
              >
                <svg
                  xmlns="http://www.w3.org/2000/svg"
                  class="h-5 w-5"
                  viewBox="0 0 20 20"
                  fill="currentColor"
                >
                  <path
                    id="commit-icon-up"
                    fill-rule="evenodd"
                    d="M10 18a8 8 0 100-16 8 8 0 000 16zm1-11a1 1 0 10-2 0v3.586L7.707 9.293a1 1 0 00-1.414 1.414l3 3a1 1 0 001.414 0l3-3a1 1 0 00-1.414-1.414L11 10.586V7z"
                    clip-rule="evenodd"></path>
                  <path
                    id="commit-icon-down"
                    class="hidden"
                    fill-rule="evenodd"
                    d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-8.707l-3-3a1 1 0 00-1.414 0l-3 3a1 1 0 001.414 1.414L9 9.414V13a1 1 0 102 0V9.414l1.293 1.293a1 1 0 001.414-1.414z"
                    clip-rule="evenodd"></path>
                </svg>
                <span id="view-commit-text">View Commit History</span>
              </div>
              <div
                id="jump-to-latest-commit"
                class="flex items-center space-x-2 cursor-pointer hover:bg-zinc-300 transition-colors duration-300 rounded-lg px-2 py-1"
              >
                <svg
                  xmlns="http://www.w3.org/2000/svg"
                  class="h-5 w-5"
                  viewBox="0 0 20 20"
                  fill="currentColor"
                >
                  <path
                    fill-rule="evenodd"
                    d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-8.707l-3-3a1 1 0 00-1.414 1.414L10.586 9H7a1 1 0 100 2h3.586l-1.293 1.293a1 1 0 101.414 1.414l3-3a1 1 0 000-1.414z"
                    clip-rule="evenodd"></path>
                </svg>
                <span>Jump to Latest Commit</span>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
    <div
      id="commit-history-container"
      class="mt-4 overflow-hidden transition-all duration-300 max-h-0"
    >
      <CommitHistory client:load />
    </div>
  </div>
</div>

<Modal id="update-config-modal" title="Update Config">
  <div
    id="modal-content"
    class="space-y-4 w-[calc(100vw-80px)] sm:w-[calc(100vw-120px)] md:w-[600px]"
  >
    <h2
      id="update-modal-project-name"
      class="text-2xl sm:text-3xl font-bold mb-4"
    >
      Project Name
    </h2>

    <label class="block mb-2 text-base font-medium text-black">
      Maintainers
      <ModalInput
        id="modal-maintainers"
        placeholder="List of maintainers' addresses as G...,G..."
        required
      />
    </label>

    <label class="block mb-2 text-base font-medium text-black">
      GitHub repository URL
      <ModalInput
        id="modal-config-url"
        placeholder="GitHub repository URL"
        required
      />
    </label>

    <label class="block mb-2 text-base font-medium text-black">
      Information file hash
      <ModalInput
        id="modal-config-hash"
        placeholder="Information file hash"
        required
        minlength="64"
        maxlength="64"
      />
    </label>

    <div id="wrap-update-button" class="relative">
      <PrimaryButton
        wrapId="wrap-update-config-button"
        dataAttr="update-config-button"
        buttonId="update-config-button"
        ariaControls="update-config-button"
        buttonText="Update Config"
      />
      <div
        id="update-config-loader"
        class="absolute top-0 left-0 w-full h-full bg-zinc-900 rounded-[14px] justify-center items-center hidden"
      >
        <Loading theme="dark" />
      </div>
    </div>
  </div>
</Modal>

<script>
  import { loadedPublicKey } from "./stellar-wallets-kit";
  import { updateConfig } from "../service/WriteContractService";
  import { getProject } from "../service/ReadContractService";
  import {
    initializeProjectState,
    loadConfigData,
    loadProjectInfo,
    loadProjectLatestSha,
    setProject,
  } from "../service/StateService";
  import { projectInfoLoaded } from "../utils/store";
  import { convertGitHubLink } from "../utils/editLinkFunctions";
  import { getLatestCommitData, getTOMLFileHash } from "../service/GithubService";

  document.addEventListener("astro:page-load", () => {
    initializeProjectState();
    projectInfoLoaded.set(true);

    const modal = document.getElementById(
      "update-config-modal",
    ) as HTMLDialogElement;

    async function updateProjectInfo() {
      const projectInfo = loadProjectInfo();
      if (projectInfo) {
        const projectNameElement =
          document.getElementById("project-name-value");
        if (projectNameElement) {
          projectNameElement.textContent = projectInfo.name;
        }
        const configData = loadConfigData();
        if (!configData || Object.keys(configData).length == 0) {
          alert("This project is missing a tansu.toml configuration file.");
        }

        const projectThumbnail = document.getElementById(
          "project-thumbnail",
        ) as HTMLImageElement;
        const projectDescription = document.getElementById("project-description");

        if (projectThumbnail) {
          if (configData && configData.logoImageLink) {
            projectThumbnail.src = convertGitHubLink(configData.logoImageLink) || "/fallback-image.jpg";
          } else projectThumbnail.src = "/fallback-image.jpg";
        }

        if (projectDescription) {
          if (configData) {
            projectDescription.textContent = configData.description || "";
          }
        }

        const maintainersList = document.getElementById("project-maintainers");
        if (maintainersList) {
          const ul = maintainersList.querySelector("ul");
          if (ul) {
            ul.innerHTML = "";
            if (
              configData &&
              configData.authorGithubNames &&
              configData.maintainersAddresses
            ) {
              configData.authorGithubNames.forEach(
                (authorName: string, index: number) => {
                  const li = document.createElement("li");
                  li.className = "relative";

                  const content = document.createElement("p");
                  content.className = "truncate";
                  content.textContent = authorName;

                  li.appendChild(content);

                  const popup = document.createElement("p");
                  popup.className =
                    "absolute left-0 bottom-full mb-1 bg-black text-white text-xs text-center p-1 rounded hidden before:content-[''] before:absolute before:left-5 before:top-full before:-translate-x-1/2 before:border-4 before:border-transparent before:border-t-black max-w-[240px] sm:max-w-[320px] md:max-w-none break-words";
                  popup.textContent =
                    configData.maintainersAddresses[index] || "";
                  li.appendChild(popup);

                  li.addEventListener("mouseenter", () => {
                    popup.classList.remove("hidden");
                  });

                  li.addEventListener("mouseleave", () => {
                    popup.classList.add("hidden");
                  });

                  ul.appendChild(li);
                },
              );
            } else {
              projectInfo.maintainers.forEach((maintainer: string) => {
                const li = document.createElement("li");
                li.className = "relative";

                const content = document.createElement("p");
                content.className = "truncate";
                content.textContent = maintainer;

                li.appendChild(content);

                const popup = document.createElement("p");
                popup.className =
                  "absolute left-0 bottom-full mb-1 bg-black text-white text-xs text-center p-1 rounded hidden before:content-[''] before:absolute before:left-1/2 before:top-full before:-translate-x-1/2 before:border-4 before:border-transparent before:border-t-black max-w-[240px] sm:max-w-[320px] md:max-w-none break-words";
                popup.textContent = maintainer;
                li.appendChild(popup);

                li.addEventListener("mouseenter", () => {
                  popup.classList.remove("hidden");
                });

                li.addEventListener("mouseleave", () => {
                  popup.classList.add("hidden");
                });

                ul.appendChild(li);
              });
            }
          }
        }

        const organizationElement = document.getElementById("project-organization-name");
        if (organizationElement) {
          if (configData && configData.companyName) {
            organizationElement.textContent = configData.companyName;
          }  
        }

        const officialLinks = document.getElementById("official-links");
        const socialLinks = document.getElementById("social-links");
        if (officialLinks) {
          officialLinks.innerHTML = "";
          if (configData && configData.officials) {
            if (configData.officials.websiteLink) {
              addLinkButton(
                officialLinks,
                "Website",
                configData.officials.websiteLink,
                "web",
              );
            }
            if (configData.officials.githubLink) {
              addLinkButton(
                officialLinks,
                "GitHub",
                configData.officials.githubLink,
                "github",
              );
            }
          }
        }

        if (socialLinks) {
          socialLinks.innerHTML = "";
          if (configData && configData.socialLinks) {
            if (configData.socialLinks.twitter) {
              addLinkButton(
                socialLinks,
                "Twitter",
                configData.socialLinks.twitter,
                "twitter",
              );
            }
            if (configData.socialLinks.telegram) {
              addLinkButton(
                socialLinks,
                "Telegram",
                configData.socialLinks.telegram,
                "telegram",
              );
            }
            if (configData.socialLinks.instagram) {
              addLinkButton(
                socialLinks,
                "Instagram",
                configData.socialLinks.instagram,
                "instagram",
              );
            }
            if (configData.socialLinks.discord) {
              addLinkButton(
                socialLinks,
                "Discord",
                configData.socialLinks.discord,
                "discord",
              );
            }
          }
        }

        const links = document.getElementById("links");
        if (links) {
          links.innerHTML = "";
          if (configData && configData.officials) {
            if (configData.officials.websiteLink) {
              const websiteLink = document.createElement("a");
              websiteLink.href = configData.officials.websiteLink;
              websiteLink.target = "_blank";
              websiteLink.rel = "noopener noreferrer";
              
              const websiteIcon = document.createElement("img");
              websiteIcon.src = "/icons/web.svg";
              websiteIcon.alt = "Website";
              websiteIcon.className = "w-6 h-6";
              
              websiteLink.appendChild(websiteIcon);
              links.appendChild(websiteLink);
            }

            if (configData.officials.githubLink) {
              const githubLink = document.createElement("a");
              githubLink.href = configData.officials.githubLink;
              githubLink.target = "_blank";
              githubLink.rel = "noopener noreferrer";
              
              const websiteIcon = document.createElement("img");
              websiteIcon.src = "/icons/github.svg";
              websiteIcon.alt = "Website";
              websiteIcon.className = "w-5 h-5";
              
              githubLink.appendChild(websiteIcon);
              links.appendChild(githubLink);
            }
          }

          if (configData && configData.socialLinks) {
            Object.entries(configData.socialLinks).forEach(([socialName, socialLink]) => {
              if (socialLink) {
                const linkElement = document.createElement("a");
                linkElement.href = socialLink;
                linkElement.target = "_blank";
                linkElement.rel = "noopener noreferrer";
                
                const iconElement = document.createElement("img");
                iconElement.src = `/icons/${socialName}.svg`;
                iconElement.alt = socialName;
                iconElement.className = "w-6 h-6";
                
                linkElement.appendChild(iconElement);
                links.appendChild(linkElement);
              }
            });
          }
        }

        const syncStatusContainer = document.getElementById("project-sync-status");
        if (syncStatusContainer) {
          syncStatusContainer.innerHTML = '';
          
          // Add configuration badge
          const projectConfigHash = projectInfo.config.hash;
          if (!projectConfigHash || typeof projectConfigHash !== 'string') {
            alert("Error: Invalid project configuration hash");
            return;
          }
          
          let tomlFileHash;
          try {
            tomlFileHash = await getTOMLFileHash(projectInfo.config.url);
          } catch (error) {
            alert("Error: Can't read tansu.toml");
            
            const failedBadge = document.createElement("div");
            failedBadge.className = "flex items-center space-x-2 px-3 py-1 rounded-full bg-red-200";
            
            const icon = document.createElement("img");
            icon.className = "w-5 h-5";
            icon.src = "/icons/failed.svg";
            icon.alt = "Failed";
            
            const text = document.createElement("span");
            text.textContent = "Configuration";
            
            failedBadge.appendChild(icon);
            failedBadge.appendChild(text);
            syncStatusContainer.appendChild(failedBadge);
          }
          
          if (tomlFileHash) {
            const configComponent = document.createElement("div");
            configComponent.className = "flex items-center space-x-2 px-2 sm:px-3 py-0.5 sm:py-1 rounded-full relative group";
            
            const icon = document.createElement("img");
            icon.className = "w-5 h-5";
            
            const text = document.createElement("span");
            text.className = "text-sm sm:text-base"
            text.textContent = "Configuration";
            
            if (projectConfigHash === tomlFileHash) {
              configComponent.classList.add("bg-lime");
              icon.src = "/icons/check.svg";
              icon.alt = "Check";
            } else {
              configComponent.classList.add("bg-orange-200");
              icon.src = "/icons/failed.svg";
              icon.alt = "Failed";
            }
            
            const popup = document.createElement("div");
            popup.className = "absolute bottom-full left-1/2 sm:left-1/4 transform -translate-x-1/2 mb-2 p-2 bg-black text-white rounded hidden group-hover:inline";
            if (projectConfigHash === tomlFileHash) {
              popup.innerHTML = '<p class="text-sm w-36 sm:w-max"><a href="https://tansu.dev/docs/project_information_file" target="_blank" class="underline text-blue-400">tansu.toml</a> file of github is valid with on-chain hash</p>';
            } else {
              popup.innerHTML = '<p class="text-sm w-36 sm:w-max"><a href="https://tansu.dev/docs/project_information_file" target="_blank" class="underline text-blue-400">tansu.toml</a> file is invalid with on-chain hash or there isn\'t in github</p>';
            }
            
            const triangle = document.createElement("div");
            triangle.className = "absolute -bottom-2 left-1/2 transform -translate-x-1/2 w-0 h-0 border-l-8 border-r-8 border-t-8 border-l-transparent border-r-transparent border-t-black";
            popup.appendChild(triangle);
            
            configComponent.appendChild(icon);
            configComponent.appendChild(text);
            configComponent.appendChild(popup);
            
            syncStatusContainer.appendChild(configComponent);
          }

          // Add commit badge
          const latestSha = loadProjectLatestSha();
          if (latestSha) {
            const commitComponent = document.createElement("div");
            commitComponent.className = "flex items-center space-x-2 px-2 sm:px-3 py-0.5 sm:py-1 rounded-full relative group";

            const commitIcon = document.createElement("img");
            commitIcon.className = "w-5 h-5";

            const commitText = document.createElement("span");
            commitText.className = "text-sm sm:text-base";
            commitText.textContent = "Commit";

            const commitPopup = document.createElement("div");
            commitPopup.className = "absolute bottom-full left-1/2 sm:left-1/4 transform -translate-x-1/2 mb-2 p-2 bg-black text-white rounded hidden group-hover:inline";

            const commitTriangle = document.createElement("div");
            commitTriangle.className = "absolute -bottom-2 left-1/2 transform -translate-x-1/2 w-0 h-0 border-l-8 border-r-8 border-t-8 border-l-transparent border-r-transparent border-t-black";

            try {
              const latestCommit = await getLatestCommitData(projectInfo.config.url, latestSha);
              
              if (latestCommit && latestCommit.sha && latestCommit.sha === latestSha) {
                commitComponent.classList.add("bg-lime");
                commitIcon.src = "/icons/check.svg";
                commitIcon.alt = "Check";
                commitPopup.innerHTML = '<p class="text-sm w-36 sm:w-max">Latest SHA is valid in GitHub</p>';
              } else {
                commitComponent.classList.add("bg-orange-200");
                commitIcon.src = "/icons/failed.svg";
                commitIcon.alt = "Failed";
                commitPopup.innerHTML = '<p class="text-sm w-36 sm:w-max">Latest SHA is invalid in GitHub</p>';            }
            } catch (error) {
              commitComponent.classList.add("bg-orange-200");
              commitIcon.src = "/icons/failed.svg";
              commitIcon.alt = "Failed";
              commitPopup.innerHTML = '<p class="text-sm w-36 sm:w-max">Latest SHA is invalid in GitHub</p>';
            }
  
            commitPopup.appendChild(commitTriangle);
            commitComponent.appendChild(commitIcon);
            commitComponent.appendChild(commitText);
            commitComponent.appendChild(commitPopup);
    
            syncStatusContainer.appendChild(commitComponent);
          } else {
            alert("Can not read latest sha.");
          }
        }
        
        // Update modal content
        const modalProjectName = document.getElementById(
          "update-modal-project-name",
        );
        if (modalProjectName) {
          modalProjectName.textContent = projectInfo.name;
        }

        const modalMaintainers = document.getElementById(
          "modal-maintainers",
        ) as HTMLInputElement;
        if (modalMaintainers) {
          modalMaintainers.value = projectInfo.maintainers.join(",");
        }
        const modalConfigUrl = document.getElementById(
          "modal-config-url",
        ) as HTMLInputElement;
        if (modalConfigUrl) {
          modalConfigUrl.value = projectInfo.config.url;
        }
        const modalConfigHash = document.getElementById(
          "modal-config-hash",
        ) as HTMLInputElement;
        if (modalConfigHash) {
          modalConfigHash.value = projectInfo.config.hash;
        }
      }
    }

    function updateUpgradeConfigButtonVisibility() {
      const projectInfo = loadProjectInfo();

      if (projectInfo) {
        const connectedPublicKey = loadedPublicKey();
        const isMaintainer = connectedPublicKey
          ? projectInfo.maintainers.includes(connectedPublicKey)
          : false;
        const updateConfigButton = document.getElementById(
          "open-update-config-modal-button",
        );
        if (updateConfigButton) {
          updateConfigButton.classList.toggle("hidden", !isMaintainer);
        }
      }
    }

    updateProjectInfo();
    updateUpgradeConfigButtonVisibility();

    const button = document.querySelector(
      "[data-update-config]",
    ) as HTMLButtonElement;
    if (button) {
      button.addEventListener("click", async () => {
        console.log("Update config button clicked");
        modal.showModal();
      });
    }

    const updateConfigButton = document.getElementById("update-config-button");
    const updateConfigLoader = document.getElementById("update-config-loader");
    if (updateConfigButton && updateConfigLoader) {
      updateConfigButton.addEventListener("click", async () => {
        const modalMaintainers = (
          document.getElementById("modal-maintainers") as HTMLInputElement
        ).value;
        const modalConfigUrl = (
          document.getElementById("modal-config-url") as HTMLInputElement
        ).value;
        const modalConfigHash = (
          document.getElementById("modal-config-hash") as HTMLInputElement
        ).value;

        updateConfigLoader.style.display = "inline-flex";

        try {
          const updateStatus = await updateConfig(
            modalMaintainers,
            modalConfigUrl,
            modalConfigHash,
          );

          if (updateStatus) {
            const project = await getProject();
            if (
              project &&
              project.name &&
              project.config &&
              project.maintainers
            ) {
              setProject(project);
            }
            updateProjectInfo();
            (
              document.getElementById(
                "update-config-modal",
              ) as HTMLDialogElement
            ).close();
          } else {
            alert("Failed to update project config. Please try again.");
          }
        } catch (error) {
          console.error("Error updating config:", error);
          alert(
            "An error occurred while updating the project config. Please try again.",
          );
        } finally {
          updateConfigLoader.style.display = "none";
        }
      });
    }

    const viewCommitHistory = document.getElementById("view-commit-history");
    const jumpToLatestCommit = document.getElementById("jump-to-latest-commit");
    const viewCommitText = document.getElementById("view-commit-text");
    const commitHistoryContainer = document.getElementById(
      "commit-history-container",
    );
    const commitIconUp = document.getElementById("commit-icon-up");
    const commitIconDown = document.getElementById("commit-icon-down");

    if (viewCommitHistory && commitHistoryContainer) {
      viewCommitHistory.addEventListener("click", () => {
        if (
          commitHistoryContainer.style.maxHeight === "0px" ||
          !commitHistoryContainer.style.maxHeight
        ) {
          commitHistoryContainer.style.maxHeight = `${commitHistoryContainer.scrollHeight}px`;
        } else {
          commitHistoryContainer.style.maxHeight = "0px";
        }
      });
    }

    if (jumpToLatestCommit && commitHistoryContainer) {
      jumpToLatestCommit.addEventListener("click", () => {
        if (
          commitHistoryContainer.style.maxHeight === "0px" ||
          !commitHistoryContainer.style.maxHeight
        ) {
          commitHistoryContainer.style.maxHeight = `${commitHistoryContainer.scrollHeight}px`;
        } else {
          setTimeout(() => {
            const latestCommit = document.getElementById(
              "latest-commit-record",
            );
            if (latestCommit) {
              latestCommit.scrollIntoView({
                behavior: "smooth",
                block: "center",
              });
            }
          }, 10);
        }
      });
    }

    if (
      viewCommitText &&
      commitHistoryContainer &&
      commitIconUp &&
      commitIconDown
    ) {
      commitHistoryContainer.addEventListener("transitionend", () => {
        if (commitHistoryContainer.style.maxHeight === "0px") {
          viewCommitText.textContent = "View Commit History";
          commitIconUp.classList.remove("hidden");
          commitIconDown.classList.add("hidden");
        } else {
          viewCommitText.textContent = "Hide Commit History";
          commitIconUp.classList.add("hidden");
          commitIconDown.classList.remove("hidden");
          setTimeout(() => {
            const latestCommit = document.getElementById(
              "latest-commit-record",
            );
            if (latestCommit) {
              latestCommit.scrollIntoView({
                behavior: "smooth",
                block: "center",
              });
            }
          }, 10);
        }
      });
    }

    window.addEventListener("walletConnected", (_event: Event) => {
      updateUpgradeConfigButtonVisibility();
    });

    function addLinkButton(
      container: HTMLElement,
      title: string,
      url: string,
      iconName: string,
    ) {
      const button = document.createElement("a");
      button.href = url;
      button.target = "_blank";
      button.rel = "noopener noreferrer";
      button.className =
        "flex items-center space-x-1 bg-zinc-200 hover:bg-zinc-300 rounded-lg px-3 py-1 text-sm";

      const icon = document.createElement("span");
      icon.innerHTML = getIconSVG(iconName);
      icon.className = "w-4 h-4";

      const text = document.createElement("span");
      text.textContent = title;

      button.appendChild(icon);
      button.appendChild(text);
      container.appendChild(button);
    }

    function getIconSVG(iconName: string) {
      const icons: { [key: string]: string } = {
        web: '<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 12a9 9 0 01-9 9m9-9a9 9 0 00-9-9m9 9H3m9 9a9 9 0 01-9-9m9 9c1.657 0 3-4.03 3-9s-1.343-9-3-9m0 18c-1.657 0-3-4.03-3-9s1.343-9 3-9m-9 9a9 9 0 019-9" /></svg>',
        github:
          '<svg xmlns="http://www.w3.org/2000/svg" fill="currentColor" viewBox="0 0 24 24"><path d="M12 0c-6.626 0-12 5.373-12 12 0 5.302 3.438 9.8 8.207 11.387.599.111.793-.261.793-.577v-2.234c-3.338.726-4.033-1.416-4.033-1.416-.546-1.387-1.333-1.756-1.333-1.756-1.089-.745.083-.729.083-.729 1.205.084 1.839 1.237 1.839 1.237 1.07 1.834 2.807 1.304 3.492.997.107-.775.418-1.305.762-1.604-2.665-.305-5.467-1.334-5.467-5.931 0-1.311.469-2.381 1.236-3.221-.124-.303-.535-1.524.117-3.176 0 0 1.008-.322 3.301 1.23.957-.266 1.983-.399 3.003-.404 1.02.005 2.047.138 3.006.404 2.291-1.552 3.297-1.23 3.297-1.23.653 1.653.242 2.874.118 3.176.77.84 1.235 1.911 1.235 3.221 0 4.609-2.807 5.624-5.479 5.921.43.372.823 1.102.823 2.222v3.293c0 .319.192.694.801.576 4.765-1.589 8.199-6.086 8.199-11.386 0-6.627-5.373-12-12-12z"/></svg>',
        twitter:
          '<svg xmlns="http://www.w3.org/2000/svg" fill="currentColor" viewBox="0 0 24 24"><path d="M24 4.557c-.883.392-1.832.656-2.828.775 1.017-.609 1.798-1.574 2.165-2.724-.951.564-2.005.974-3.127 1.195-.897-.957-2.178-1.555-3.594-1.555-3.179 0-5.515 2.966-4.797 6.045-4.091-.205-7.719-2.165-10.148-5.144-1.29 2.213-.669 5.108 1.523 6.574-.806-.026-1.566-.247-2.229-.616-.054 2.281 1.581 4.415 3.949 4.89-.693.188-1.452.232-2.224.084.626 1.956 2.444 3.379 4.6 3.419-2.07 1.623-4.678 2.348-7.29 2.04 2.179 1.397 4.768 2.212 7.548 2.212 9.142 0 14.307-7.721 13.995-14.646.962-.695 1.797-1.562 2.457-2.549z"/></svg>',
        telegram:
          '<svg xmlns="http://www.w3.org/2000/svg" fill="currentColor" viewBox="0 0 24 24"><path d="M23.91 3.79L20.3 20.84c-.25 1.21-.98 1.5-2 .94l-5.5-4.07-2.66 2.57c-.3.3-.55.56-1.1.56-.72 0-.6-.27-.84-.95L6.3 13.7l-5.45-1.7c-1.18-.35-1.19-1.16.26-1.75l21.26-8.2c.97-.43 1.9.24 1.53 1.73z"/></svg>',
        instagram:
          '<svg xmlns="http://www.w3.org/2000/svg" fill="currentColor" viewBox="0 0 24 24"><path d="M12 2.163c3.204 0 3.584.012 4.85.07 3.252.148 4.771 1.691 4.919 4.919.058 1.265.069 1.645.069 4.849 0 3.205-.012 3.584-.069 4.849-.149 3.225-1.664 4.771-4.919 4.919-1.266.058-1.644.07-4.85.07-3.204 0-3.584-.012-4.849-.07-3.26-.149-4.771-1.699-4.919-4.92-.058-1.265-.07-1.644-.07-4.849 0-3.204.013-3.583.07-4.849.149-3.227 1.664-4.771 4.919-4.919 1.266-.057 1.645-.069 4.849-.069zm0-2.163c-3.259 0-3.667.014-4.947.072-4.358.2-6.78 2.618-6.98 6.98-.059 1.281-.073 1.689-.073 4.948 0 3.259.014 3.668.072 4.948.2 4.358 2.618 6.78 6.98 6.98 1.281.058 1.689.072 4.948.072 3.259 0 3.668-.014 4.948-.072 4.354-.2 6.782-2.618 6.979-6.98.059-1.28.073-1.689.073-4.948 0-3.259-.014-3.667-.072-4.947-.196-4.354-2.617-6.78-6.979-6.98-1.281-.059-1.69-.073-4.949-.073zm0 5.838c-3.403 0-6.162 2.759-6.162 6.162s2.759 6.163 6.162 6.163 6.162-2.759 6.162-6.163c0-3.403-2.759-6.162-6.162-6.162zm0 10.162c-2.209 0-4-1.79-4-4 0-2.209 1.791-4 4-4s4 1.791 4 4c0 2.21-1.791 4-4 4zm6.406-11.845c-.796 0-1.441.645-1.441 1.44s.645 1.44 1.441 1.44c.795 0 1.439-.645 1.439-1.44s-.644-1.44-1.439-1.44z"/></svg>',
        facebook:
          '<svg xmlns="http://www.w3.org/2000/svg" fill="currentColor" viewBox="0 0 24 24"><path d="M9 8h-3v4h3v12h5v-12h3.642l.358-4h-4v-1.667c0-.955.192-1.333 1.115-1.333h2.885v-5h-3.808c-3.596 0-5.192 1.583-5.192 4.615v3.385z"/></svg>',
        discord:
          '<svg xmlns="http://www.w3.org/2000/svg" fill="currentColor" viewBox="0 0 24 24"><path d="M20.317 4.3698a19.7913 19.7913 0 00-4.8851-1.5152.0741.0741 0 00-.0785.0371c-.211.3753-.4447.8648-.6083 1.2495-1.8447-.2762-3.68-.2762-5.4868 0-.1636-.3933-.4058-.8742-.6177-1.2495a.077.077 0 00-.0785-.037 19.7363 19.7363 0 00-4.8852 1.515.0699.0699 0 00-.0321.0277C.5334 9.0458-.319 13.5799.0992 18.0578a.0824.0824 0 00.0312.0561c2.0528 1.5076 4.0413 2.4228 5.9929 3.0294a.0777.0777 0 00.0842-.0276c.4616-.6304.8731-1.2952 1.226-1.9942a.076.076 0 00-.0416-.1057c-.6528-.2476-1.2743-.5495-1.8722-.8923a.077.077 0 01-.0076-.1277c.1258-.0943.2517-.1923.3718-.2914a.0743.0743 0 01.0776-.0105c3.9278 1.7933 8.18 1.7933 12.0614 0a.0739.0739 0 01.0785.0095c.1202.099.246.1981.3728.2924a.077.077 0 01-.0066.1276 12.2986 12.2986 0 01-1.873.8914.0766.0766 0 00-.0407.1067c.3604.698.7719 1.3628 1.225 1.9932a.076.076 0 00.0842.0286c1.961-.6067 3.9495-1.5219 6.0023-3.0294a.077.077 0 00.0313-.0552c.5004-5.177-.8382-9.6739-3.5485-13.6604a.061.061 0 00-.0312-.0286zM8.02 15.3312c-1.1825 0-2.1569-1.0857-2.1569-2.419 0-1.3332.9555-2.4189 2.157-2.4189 1.2108 0 2.1757 1.0952 2.1568 2.419 0 1.3332-.9555 2.4189-2.1569 2.4189zm7.9748 0c-1.1825 0-2.1569-1.0857-2.1569-2.419 0-1.3332.9554-2.4189 2.1569-2.4189 1.2108 0 2.1757 1.0952 2.1568 2.419 0 1.3332-.946 2.4189-2.1568 2.4189Z"/></svg>',
        reddit:
          '<svg xmlns="http://www.w3.org/2000/svg" fill="currentColor" viewBox="0 0 24 24"><path d="M12 0A12 12 0 0 0 0 12a12 12 0 0 0 12 12 12 12 0 0 0 12-12A12 12 0 0 0 12 0zm5.01 4.744c.688 0 1.25.561 1.25 1.249a1.25 1.25 0 0 1-2.498.056l-2.597-.547-.8 3.747c1.824.07 3.48.632 4.674 1.488.308-.309.73-.491 1.207-.491.968 0 1.754.786 1.754 1.754 0 .716-.435 1.333-1.01 1.614a3.111 3.111 0 0 1 .042.52c0 2.694-3.13 4.87-7.004 4.87-3.874 0-7.004-2.176-7.004-4.87 0-.183.015-.366.043-.534A1.748 1.748 0 0 1 4.028 12c0-.968.786-1.754 1.754-1.754.463 0 .898.196 1.207.49 1.207-.883 2.878-1.43 4.744-1.487l.885-4.182a.342.342 0 0 1 .14-.197.35.35 0 0 1 .238-.042l2.906.617a1.214 1.214 0 0 1 1.108-.701zM9.25 12C8.561 12 8 12.562 8 13.25c0 .687.561 1.248 1.25 1.248.687 0 1.248-.561 1.248-1.249 0-.688-.561-1.249-1.249-1.249zm5.5 0c-.687 0-1.248.561-1.248 1.25 0 .687.561 1.248 1.249 1.248.688 0 1.249-.561 1.249-1.249 0-.687-.562-1.249-1.25-1.249zm-5.466 3.99a.327.327 0 0 0-.231.094.33.33 0 0 0 0 .463c.842.842 2.484.913 2.961.913.477 0 2.105-.056 2.961-.913a.361.361 0 0 0 .029-.463.33.33 0 0 0-.464 0c-.547.533-1.684.73-2.512.73-.828 0-1.979-.196-2.512-.73a.326.326 0 0 0-.232-.095z"/></svg>',
      };
      return icons[iconName] || "";
    }
  });
</script>
