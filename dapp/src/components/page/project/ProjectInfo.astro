---
import CommitHistory from "./CommitHistory";
import DonateModal from "./DonateModal";
import LastHashModal from "./LastHashModal.astro";
import LatestCommit from "./LatestCommit";
import ReadMoreModal from "./ReadMoreModal.astro";
import Button from "components/utils/Button";
---

<div class="mx-auto w-full max-w-[1048px] flex flex-col gap-6">
  <div class="py-12 flex flex-col gap-12 bg-[#FFFFFFB8]">
    <div class="px-[16px] lg:px-[72px] flex flex-col gap-9">
      <div class="flex flex-col gap-6">
        <div class="flex flex-col gap-12">
          <div class="flex max-lg:flex-col gap-6 items-center">
            <img
              id="project-thumbnail"
              alt="Project Thumbnail"
              src="/fallback-image.jpg"
              class="w-[220px] object-cover"
            />
            <div class="flex flex-col gap-9">
              <div class="flex flex-col gap-3">
                <p
                  id="project-organization-name"
                  class="text-base sm:text-lg text-secondary"
                >
                </p>
                <div class="flex gap-[18px]">
                  <p id="project-name" class="text-2xl text-primary"></p>
                  <div id="official-links" class="flex items-center gap-3">
                  </div>
                </div>
                <p
                  id="project-description"
                  class="text-base sm:text-lg text-secondary"
                >
                </p>
              </div>
              <LatestCommit client:only />
            </div>
          </div>
        </div>
      </div>
      <div class="flex max-lg:flex-col gap-[18px]">
        <Button id="goto-dao" icon="/icons/gear-white.svg">
          <p class="leading-5 text-xl text-white">Governance</p>
        </Button>
        <DonateModal client:only>
          <Button icon="/icons/heart.svg" size="xl" type="secondary">
            Support
          </Button>
        </DonateModal>
        <Button
          id="read-more-button"
          icon="/icons/book.svg"
          size="xl"
          type="secondary"
        >
          Read More
        </Button>
        <Button
          id="last-hash-button"
          icon="/icons/eye.svg"
          size="xl"
          type="secondary"
        >
          Last Hash
        </Button>
      </div>
    </div>
    <div
      id="project-maintainers"
      class="p-[15px_16px] lg:p-[30px_72px] bg-white flex flex-col gap-5"
    >
      <p class="leading-4 text-base text-secondary">Maintainers</p>
      <ul class="grid grid-cols-3 gap-9"></ul>
      <div class="flex view-all"></div>
    </div>
    <CommitHistory client:load />
  </div>
</div>

<ReadMoreModal />

<LastHashModal />

<script>
  import { getLatestCommitData, getTOMLFileHash } from "@service/GithubService";
  import { navigate } from "astro:transitions/client";
  import type { ConfigData } from "types/projectConfig";
  import { formatDateTime } from "utils/formatTimeFunctions";
  import {
    loadConfigData,
    loadProjectInfo,
    loadProjectLatestSha,
    loadProjectName,
  } from "../../../service/StateService";
  import { convertGitHubLink } from "../../../utils/editLinkFunctions";
  import { projectInfoLoaded } from "../../../utils/store";

  document.addEventListener("astro:page-load", () => {
    const updateConfigButton = document.querySelector("[data-update-config]");
    const udpateConfigModal = document.getElementById(
      "update-config-modal",
    ) as HTMLDialogElement;

    if (updateConfigButton) {
      updateConfigButton.addEventListener("click", () => {
        udpateConfigModal.showModal();
      });
    }

    const readMoreButton = document.getElementById("read-more-button");
    const readMoreModal = document.getElementById(
      "read-more-modal",
    ) as HTMLDialogElement;

    if (readMoreButton && readMoreModal) {
      readMoreButton.addEventListener("click", () => {
        readMoreModal.showModal();
      });
    }

    const lastHashButton = document.getElementById("last-hash-button");
    const lastHashModal = document.getElementById(
      "last-hash-modal",
    ) as HTMLDialogElement;

    if (lastHashButton && lastHashModal) {
      lastHashButton.addEventListener("click", () => {
        lastHashModal.showModal();
      });
    }

    const updateMaintainerList = (
      projectInfo: any,
      configData?: ConfigData,
      viewAll?: boolean,
    ) => {
      const maintainersList = document.getElementById("project-maintainers");
      if (maintainersList) {
        const viewAllButtonContainer =
          maintainersList.querySelector(".view-all");
        if (viewAllButtonContainer) viewAllButtonContainer.innerHTML = "";
        const viewAllButton = document.createElement("button");
        viewAllButton.className =
          "leading-[18px] text-lg font-[450] text-primary underline";
        viewAllButton.textContent = viewAll ? "Less" : "View All";
        if (viewAll) {
          viewAllButton.addEventListener("click", () =>
            updateMaintainerList(projectInfo, configData, !viewAll),
          );
        }
        const ul = maintainersList.querySelector("ul");
        if (ul) {
          ul.innerHTML = "";
          if (
            configData &&
            configData.authorGithubNames &&
            configData.maintainersAddresses
          ) {
            configData.authorGithubNames
              .filter((_: string, index: number) => index <= 5 || viewAll)
              .forEach((authorName: string, index: number) => {
                const li = document.createElement("li");
                li.className = "flex flex-col gap-2";

                const content = document.createElement("p");
                content.className = "leading-6 text-xl text-primary";
                content.textContent = `@${authorName}`;
                li.appendChild(content);

                const address = document.createElement("p");
                address.className = "leading-[14px] text-sm text-secondary";
                address.textContent = `(${configData.maintainersAddresses[index]?.slice(0, 28) || ""}...)`;
                li.appendChild(address);

                ul.appendChild(li);
              });
            if (
              viewAllButtonContainer &&
              configData.authorGithubNames.length > 5
            ) {
              viewAllButtonContainer.append(viewAllButton);
            }
          } else {
            projectInfo.maintainers
              .filter((_: string, index: number) => index <= 5 || viewAll)
              .forEach((maintainer: string) => {
                const li = document.createElement("li");
                li.className = "relative";

                const content = document.createElement("p");
                content.className = "leading-6 text-xl text-primary truncate";
                content.textContent = maintainer;
                li.appendChild(content);

                const popup = document.createElement("p");
                popup.className =
                  "absolute left-0 bottom-full mb-1 p-1 bg-black text-center text-xs text-white rounded hidden max-w-[240px] sm:max-w-[320px] md:max-w-none break-words";
                popup.textContent = maintainer;
                li.appendChild(popup);

                li.addEventListener("mouseenter", () => {
                  popup.classList.remove("hidden");
                });

                li.addEventListener("mouseleave", () => {
                  popup.classList.add("hidden");
                });

                ul.appendChild(li);
              });
            if (viewAllButtonContainer && projectInfo.maintainers.length > 5) {
              viewAllButtonContainer.append(viewAllButton);
            }
          }
        }
      }
    };

    let projectInfo: any;

    async function updateProjectInfo() {
      projectInfo = loadProjectInfo();
      if (projectInfo) {
        const gotoDaoButton = document.getElementById("goto-dao");
        if (gotoDaoButton) {
          gotoDaoButton.addEventListener("click", () =>
            navigate(`/governance?name=${projectInfo.name}`),
          );
        }

        const projectNameElement = document.getElementById("project-name");
        if (projectNameElement) {
          projectNameElement.textContent = projectInfo.name;
        }
        const configData = loadConfigData();

        const projectThumbnail = document.getElementById(
          "project-thumbnail",
        ) as HTMLImageElement;
        const projectDescription = document.getElementById(
          "project-description",
        );

        if (projectThumbnail) {
          if (configData && configData.logoImageLink) {
            projectThumbnail.src =
              convertGitHubLink(configData.logoImageLink) ||
              "/fallback-image.jpg";
          } else projectThumbnail.src = "/fallback-image.jpg";
        }

        if (projectDescription) {
          if (configData) {
            projectDescription.textContent = configData.description || "";
          }
        }

        updateMaintainerList(projectInfo, configData, false);

        const organizationElement = document.getElementById(
          "project-organization-name",
        );
        if (organizationElement) {
          if (configData) {
            organizationElement.textContent =
              configData.organizationName || "Not available";
          }
        }

        const officialLinks = document.getElementById("official-links");
        if (officialLinks) {
          officialLinks.innerHTML = "";
          if (configData && configData.officials) {
            if (configData.officials.githubLink) {
              addLinkButton(
                officialLinks,
                configData.officials.githubLink,
                "github",
              );
            }
            if (configData.officials.websiteLink) {
              addLinkButton(
                officialLinks,
                configData.officials.websiteLink,
                "web",
              );
            }
          } else {
            addLinkButton(officialLinks, projectInfo.config.url, "github");
          }
        }

        //Support modal content
        const loadedName = loadProjectName();
        if (loadedName) {
          const projectNameSpan = document.getElementById("contribute-text");
          if (projectNameSpan) {
            projectNameSpan.innerHTML = `Contribute to <span id="project-name">${loadedName}</span>.xlm`;
          }

          const donateTipPopup = document.getElementById("donate-tip-popup");
          if (donateTipPopup) {
            donateTipPopup.innerHTML = `Help us run the Tansu platform sustainability
                <div class="absolute -bottom-1 left-1/2 transform -translate-x-1/2 w-0 h-0 border-l-4 border-r-4 border-t-4 border-transparent border-t-zinc-800"></div>`;
          }
        }

        const syncStatusContainer = document.getElementById(
          "project-sync-status",
        );
        if (syncStatusContainer) {
          syncStatusContainer.innerHTML = "";

          // Add configuration badge
          const projectConfigHash = projectInfo.config.hash;
          if (!projectConfigHash || typeof projectConfigHash !== "string") {
            alert("Error: Invalid project configuration hash");
            return;
          }

          let tomlFileHash = await getTOMLFileHash(projectInfo.config.url);

          const configComponent = document.createElement("div");
          configComponent.className =
            "flex items-center space-x-2 rounded-full relative group";

          const icon = document.createElement("img");
          icon.className = "w-5 h-5";

          const text = document.createElement("span");
          text.className = "text-sm sm:text-base";
          text.textContent = "Configuration";

          if (tomlFileHash && projectConfigHash === tomlFileHash) {
            icon.src = "/icons/check.svg";
            icon.alt = "Check";
          } else {
            icon.src = "/icons/failed.svg";
            icon.alt = "Failed";
          }

          const popup = document.createElement("div");
          popup.className =
            "absolute bottom-full left-1/2 sm:left-1/4 transform -translate-x-1/2 mb-2 p-2 bg-black text-white rounded hidden group-hover:inline";
          if (tomlFileHash && projectConfigHash === tomlFileHash) {
            popup.innerHTML =
              '<p class="text-sm w-36 sm:w-max"><a href="https://tansu.dev/docs/project_information_file" target="_blank" class="underline text-blue-400">tansu.toml</a> on-chain hash matches the hash of the file on GitHub</p>';
          } else if (tomlFileHash) {
            popup.innerHTML =
              '<p class="text-sm w-36 sm:w-max"><a href="https://tansu.dev/docs/project_information_file" target="_blank" class="underline text-blue-400">tansu.toml</a> on-chain hash does not match the hash of the file on GitHub</p>';
          } else {
            popup.innerHTML =
              '<p class="text-sm w-36 sm:w-max"><a href="https://tansu.dev/docs/project_information_file" target="_blank" class="underline text-blue-400">tansu.toml</a> not found on GitHub</p>';
          }

          const triangle = document.createElement("div");
          triangle.className =
            "absolute -bottom-2 left-1/2 transform -translate-x-1/2 w-0 h-0 border-l-8 border-r-8 border-t-8 border-l-transparent border-r-transparent border-t-black";
          popup.appendChild(triangle);

          configComponent.appendChild(icon);
          configComponent.appendChild(text);
          configComponent.appendChild(popup);

          syncStatusContainer.appendChild(configComponent);

          // Add commit badge
          const latestSha = loadProjectLatestSha();
          const commitComponent = document.createElement("div");
          commitComponent.className =
            "flex items-center space-x-2 rounded-full relative group";

          const commitIcon = document.createElement("img");
          commitIcon.className = "w-5 h-5";

          const commitText = document.createElement("span");
          commitText.className = "text-sm sm:text-base";
          commitText.textContent = "Commit";

          const commitPopup = document.createElement("div");
          commitPopup.className =
            "absolute bottom-full left-1/2 sm:left-1/4 transform -translate-x-1/2 mb-2 p-2 bg-black text-white rounded hidden group-hover:inline";

          const commitTriangle = document.createElement("div");
          commitTriangle.className =
            "absolute -bottom-2 left-1/2 transform -translate-x-1/2 w-0 h-0 border-l-8 border-r-8 border-t-8 border-l-transparent border-r-transparent border-t-black";

          try {
            if (projectInfo.config.url && latestSha) {
              const latestCommit = await getLatestCommitData(
                projectInfo.config.url,
                latestSha,
              );

              if (
                latestCommit &&
                latestCommit.sha &&
                latestCommit.sha === latestSha
              ) {
                commitIcon.src = "/icons/check.svg";
                commitIcon.alt = "Check";
                commitPopup.innerHTML =
                  '<p class="text-sm w-36 sm:w-max">Commit SHA on-chain exists on GitHub</p>';
              } else {
                commitIcon.src = "/icons/check.svg";
                commitIcon.alt = "Failed";
                commitPopup.innerHTML =
                  '<p class="text-sm w-36 sm:w-max">Commit SHA on-chain cannot be found on GitHub</p>';
              }
            } else {
              commitIcon.src = "/icons/failed.svg";
              commitIcon.alt = "Failed";
              commitPopup.innerHTML =
                '<p class="text-sm w-36 sm:w-max">No commit SHA on-chain yet</p>';
            }
          } catch (error) {
            commitIcon.src = "/icons/failed.svg";
            commitIcon.alt = "Failed";
            commitPopup.innerHTML =
              '<p class="text-sm w-36 sm:w-max">No commit SHA can be found on-chain or on GitHub</p>';
          }
        }

        // Read more modal content
        const readMoreModal = document.getElementById("read-more-modal");
        if (readMoreModal) {
          const projectOrganizationContainer = readMoreModal.querySelector(
            ".project-organization",
          );
          if (projectOrganizationContainer)
            projectOrganizationContainer.textContent =
              configData?.organizationName || "Not available";
          const projectNameContainer =
            readMoreModal.querySelector(".project-name");
          if (projectNameContainer)
            projectNameContainer.textContent = projectInfo.name;
          const officialLinksContainer = readMoreModal.querySelector(
            ".official-links",
          ) as HTMLElement;
          if (officialLinksContainer) {
            if (configData?.officials) {
              if (configData.officials.githubLink) {
                addLinkButton(
                  officialLinksContainer,
                  configData.officials.githubLink,
                  "github",
                );
              }
              if (configData.officials.websiteLink) {
                addLinkButton(
                  officialLinksContainer,
                  configData.officials.websiteLink,
                  "web",
                );
              }
            } else {
              addLinkButton(
                officialLinksContainer,
                "GitHub",
                projectInfo.config.url,
              );
            }
          }
          const projectDescContainer = readMoreModal.querySelector(
            ".project-description",
          );
          if (projectDescContainer && configData)
            projectDescContainer.textContent = configData.description;

          const projectThumbnail = readMoreModal.querySelector(
            ".project-thumbnail",
          ) as HTMLImageElement | null;
          if (projectThumbnail) {
            if (configData && configData.logoImageLink) {
              projectThumbnail.src =
                convertGitHubLink(configData.logoImageLink) ||
                "/fallback-image.jpg";
            } else projectThumbnail.src = "/fallback-image.jpg";
          }
        }

        // Last hash modal content
        const latestSha = loadProjectLatestSha();
        if (latestSha) {
          const latestCommit = await getLatestCommitData(
            projectInfo.config.url,
            latestSha,
          );
          const lastHashModal = document.getElementById("last-hash-modal");
          if (lastHashModal) {
            const copyButton = lastHashModal.querySelector(
              ".commit-link-copy",
            ) as HTMLButtonElement;
            copyButton.addEventListener("click", () => {
              navigator.clipboard.writeText(latestCommit.html_url);
            });
            const commitLink = lastHashModal.querySelector(
              ".commit-link",
            ) as HTMLLinkElement;
            commitLink.href = latestCommit.html_url;
            const commitHash = lastHashModal.querySelector(
              ".commit-hash",
            ) as HTMLParagraphElement;
            commitHash.textContent = `${latestCommit.sha.slice(0, 24)}...`;
            const commitDate = lastHashModal.querySelector(
              ".commit-date",
            ) as HTMLParagraphElement;
            commitDate.textContent = formatDateTime(
              latestCommit?.commit.committer.date,
            );
            const commitAuthor = lastHashModal.querySelector(
              ".commit-author",
            ) as HTMLParagraphElement;
            commitAuthor.textContent = `@${latestCommit?.commit.author.name}`;
          }
        }
      }
    }

    projectInfoLoaded.subscribe((loaded) => {
      if (loaded) {
        updateProjectInfo();
      }
    });

    function addLinkButton(
      container: HTMLElement,
      url: string,
      iconName: string,
    ) {
      const button = document.createElement("a");
      button.href = url;
      button.target = "_blank";
      button.rel = "noopener noreferrer";

      const icon = document.createElement("img");
      icon.src = getIconSVG(iconName);
      icon.alt = iconName;
      icon.className = "w-4 h-4";

      button.appendChild(icon);
      container.appendChild(button);
    }

    function getIconSVG(iconName: string) {
      const icons: { [key: string]: string } = {
        web: "/icons/logos/web.svg",
        github: "/icons/logos/github.svg",
        twitter: "/icons/logos/twitter-x.svg",
        telegram: "/icons/logos/telegram.svg",
        discord: "/icons/logos/discord.svg",
      };
      return icons[iconName] || "";
    }
  });
</script>
