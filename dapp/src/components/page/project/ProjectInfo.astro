---
import {
  BackIcon,
  BookIcon,
  EyeIcon,
  GotoIcon,
  InfoIcon,
  SettingIcon,
} from "components/icons";
import Loading from "../../utils/Loading.astro";
import Modal from "../../utils/Modal.astro";
import ModalInput from "../../utils/ModalInput.astro";
import PrimaryButton from "../../utils/PrimaryButton.astro";
import CommitHistory from "./CommitHistory.jsx";
import DonateModal from "./DonateModal.astro";
import ProjectReadme from "./ProjectReadme.astro";
---

<div class="mx-auto w-full max-w-[1048px] flex flex-col gap-6">
  <div class="flex justify-between items-center">
    <div class="flex">
      <button id="back-to-home" class="flex gap-[14px]">
        <BackIcon />
        <p class="leading-5 text-xl text-[#311255]">Back to Home Page</p>
      </button>
    </div>
    <div class="flex gap-3">
      <div class="p-[12px_18px] bg-white">
        <p class="leading-5 text-xl text-[#311255]">Follow</p>
      </div>
      <div class="p-[11px] bg-white">
        <GotoIcon />
      </div>
    </div>
  </div>
  <div class="py-12 flex flex-col gap-12 bg-[#FFFFFFB8]">
    <div class="px-[72px] flex flex-col gap-9">
      <div class="flex flex-col gap-6">
        <div class="flex flex-col gap-12">
          <div class="flex gap-6 items-center">
            <img
              id="project-thumbnail"
              src="/fallback-image.jpg"
              alt="Project Thumbnail"
              class="w-[220px] object-cover rounded-lg"
            />
            <div class="flex flex-col gap-9">
              <div class="flex flex-col gap-1.5">
                <div
                  id="project-name"
                  class="flex justify-between items-end space-x-2"
                >
                  <p
                    id="project-name-value"
                    class="text-2xl sm:text-4xl font-bold"
                  >
                  </p>
                </div>
                <p
                  id="project-description"
                  class="flex-1 text-base sm:text-lg text-[#4C4354]"
                >
                </p>
              </div>
              <div class="grid grid-cols-2 gap-9">
                <div class="flex flex-col gap-[10px]">
                  <div class="flex gap-2">
                    <p class="text-[#4C4354]">Funding Progress</p>
                    <InfoIcon />
                  </div>
                  <div class="flex items-center gap-3">
                    <div class="w-[134px] bg-[#EFEBF4]">
                      <div class="w-[68px] h-2 bg-[#FFBD1E]"></div>
                    </div>
                    <p class="font-medium text-[#311255]">$12,500 / $20,000</p>
                  </div>
                </div>
                <div class="flex flex-col gap-[10px]">
                  <div class="flex gap-2">
                    <p class="text-[#4C4354]">Synchronization Status</p>
                    <InfoIcon />
                  </div>
                  <div
                    id="project-sync-status"
                    class="flex flex-wrap gap-5 min-h-7"
                  >
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
      <div class="flex gap-[18px]">
        <button id="goto-dao" class="p-[18px_30px] flex gap-3 bg-[#311255]">
          <SettingIcon />
          <p class="leading-5 text-xl text-white">DAO Management</p>
        </button>
        <button class="p-[18px_30px] flex gap-3 bg-white">
          <img src="/icons/heart.svg" />
          <p class="leading-5 text-xl text-[#311255]">Support</p>
        </button>
        <button id="read-more-button" class="p-[18px_30px] flex gap-3 bg-white">
          <BookIcon />
          <p class="leading-5 text-xl text-[#311255]">Read More</p>
        </button>
        <button class="p-[18px_30px] flex gap-3 bg-white">
          <EyeIcon />
          <p class="leading-5 text-xl text-[#311255]">Last Hash</p>
        </button>
      </div>
    </div>
    <div class="p-[30px_72px] grid grid-cols-2 gap-12 bg-white">
      <div id="project-maintainers" class="flex flex-col gap-5">
        <p class="leading-4 text-base text-[#4C4354]">Maintainers</p>
        <ul class="flex flex-col gap-[18px]"></ul>
        <button
          class="leading-[18px] text-lg font-[450] text-[#311255] underline"
        >
          View All
        </button>
      </div>
      <div class="flex flex-col gap-[30px]">
        <div id="project-organization" class="flex flex-col gap-5">
          <h3 class="leading-4 text-base text-[#4C4354]">Organization</h3>
          <p
            id="project-organization-name"
            class="leading-5 text-xl text-[#311255]"
          >
          </p>
        </div>
        <div class="flex flex-col gap-5">
          <h3 class="leading-4 text-base text-[#4C4354]">Official Links</h3>
          <div id="official-links" class="flex flex-wrap gap-x-6 min-h-7"></div>
        </div>
      </div>
    </div>
    <CommitHistory client:load />
  </div>
</div>

<Modal id="update-config-modal">
  <div
    id="modal-content"
    class="flex flex-col gap-4 w-[calc(100vw-80px)] sm:w-[calc(100vw-120px)] md:w-[600px]"
  >
    <h2
      id="update-modal-project-name"
      class="text-2xl sm:text-3xl font-bold mb-4"
    >
      Project Name
    </h2>

    <label class="block mb-2 text-base font-medium text-black">
      Maintainers
      <ModalInput
        id="modal-maintainers"
        placeholder="List of maintainers' addresses as G...,G..."
        required
      />
    </label>

    <label class="block mb-2 text-base font-medium text-black">
      GitHub repository URL
      <ModalInput
        id="modal-config-url"
        placeholder="GitHub repository URL"
        required
      />
    </label>

    <label class="block mb-2 text-base font-medium text-black">
      Information file hash
      <ModalInput
        id="modal-config-hash"
        placeholder="Information file hash"
        required
        minlength="64"
        maxlength="64"
      />
    </label>

    <div id="wrap-update-button" class="relative">
      <PrimaryButton
        wrapId="wrap-update-config-button"
        dataAttr="update-config-button"
        buttonId="update-config-button"
        ariaControls="update-config-button"
        buttonText="Update Config"
      />
      <div
        id="update-config-loader"
        class="absolute top-0 left-0 w-full h-full bg-zinc-900 rounded-[14px] justify-center items-center hidden"
      >
        <Loading theme="dark" />
      </div>
    </div>
  </div>
</Modal>

<Modal id="read-more-modal">
  <div class="p-9 w-[1048px] flex gap-12">
    <img
      class="project-thumbnail w-[220px] h-[220px]"
      alt="project-thumbnail"
      src=""
    />
    <div class="flex flex-col gap-[30px]">
      <div class="flex flex-col gap-3">
        <p class="project-name leading-6 text-xl font-medium text-[#311255]">
        </p>
        <p class="project-description text-base text-[#4C4354]"></p>
      </div>
      <ProjectReadme />
    </div>
  </div>
</Modal>

<DonateModal />

<script>
  import { navigate } from "astro:transitions/client";
  import {
    getLatestCommitData,
    getTOMLFileHash,
  } from "../../../service/GithubService";
  import { getProject } from "../../../service/ReadContractService";
  import {
    loadConfigData,
    loadProjectInfo,
    loadProjectLatestSha,
    loadProjectName,
    setProject,
  } from "../../../service/StateService";
  import { loadedPublicKey } from "../../../service/walletService";
  import { updateConfig } from "../../../service/WriteContractService";
  import { convertGitHubLink } from "../../../utils/editLinkFunctions";
  import { projectInfoLoaded } from "../../../utils/store";

  document.addEventListener("astro:page-load", () => {
    const backButton = document.getElementById("back-to-home");
    if (backButton) {
      backButton.addEventListener("click", () => navigate("/"));
    }

    const modal = document.getElementById(
      "update-config-modal",
    ) as HTMLDialogElement;

    const readMoreModal = document.getElementById(
      "read-more-modal",
    ) as HTMLDialogElement;
    const readMoreButton = document.getElementById("read-more-button");

    if (readMoreButton) {
      readMoreButton.addEventListener("click", () => {
        readMoreModal.showModal();
      });
    }

    let projectInfo: any;

    async function updateProjectInfo() {
      projectInfo = loadProjectInfo();
      if (projectInfo) {
        const gotoDaoButton = document.getElementById("goto-dao");
        if (gotoDaoButton) {
          gotoDaoButton.addEventListener("click", () =>
            navigate(`/governance?name=${projectInfo.name}`),
          );
        }

        const projectNameElement =
          document.getElementById("project-name-value");
        if (projectNameElement) {
          projectNameElement.textContent = projectInfo.name;
        }
        const configData = loadConfigData();

        const projectThumbnail = document.getElementById(
          "project-thumbnail",
        ) as HTMLImageElement;
        const projectDescription = document.getElementById(
          "project-description",
        );

        if (projectThumbnail) {
          if (configData && configData.logoImageLink) {
            projectThumbnail.src =
              convertGitHubLink(configData.logoImageLink) ||
              "/fallback-image.jpg";
          } else projectThumbnail.src = "/fallback-image.jpg";
        }

        if (projectDescription) {
          if (configData) {
            projectDescription.textContent = configData.description || "";
          }
        }

        const maintainersList = document.getElementById("project-maintainers");
        if (maintainersList) {
          const ul = maintainersList.querySelector("ul");
          if (ul) {
            ul.innerHTML = "";
            if (
              configData &&
              configData.authorGithubNames &&
              configData.maintainersAddresses
            ) {
              configData.authorGithubNames.forEach(
                (authorName: string, index: number) => {
                  const li = document.createElement("li");
                  li.className = "flex flex-col gap-2";

                  const content = document.createElement("p");
                  content.className = "leading-6 text-xl text-[#311255]";
                  content.textContent = `@${authorName}`;
                  li.appendChild(content);

                  const address = document.createElement("p");
                  address.className = "leading-[14px] text-sm text-[#4C4354]";
                  address.textContent = `(${configData.maintainersAddresses[index]?.slice(0, 28) || ""}...)`;
                  li.appendChild(address);

                  ul.appendChild(li);
                },
              );
            } else {
              projectInfo.maintainers.forEach((maintainer: string) => {
                const li = document.createElement("li");
                li.className = "relative";

                const content = document.createElement("p");
                content.className = "truncate";
                content.textContent = maintainer;

                li.appendChild(content);

                const popup = document.createElement("p");
                popup.className =
                  "absolute left-0 bottom-full mb-1 bg-black text-white text-xs text-center p-1 rounded hidden before:content-[''] before:absolute before:left-1/2 before:top-full before:-translate-x-1/2 before:border-4 before:border-transparent before:border-t-black max-w-[240px] sm:max-w-[320px] md:max-w-none break-words";
                popup.textContent = maintainer;
                li.appendChild(popup);

                li.addEventListener("mouseenter", () => {
                  popup.classList.remove("hidden");
                });

                li.addEventListener("mouseleave", () => {
                  popup.classList.add("hidden");
                });

                ul.appendChild(li);
              });
            }
          }
        }

        const organizationElement = document.getElementById(
          "project-organization-name",
        );
        if (organizationElement) {
          if (configData) {
            organizationElement.textContent =
              configData.organizationName || "Not available";
          }
        }

        const officialLinks = document.getElementById("official-links");
        if (officialLinks) {
          officialLinks.innerHTML = "";
          if (configData && configData.officials) {
            if (configData.officials.githubLink) {
              addLinkButton(
                officialLinks,
                "GitHub",
                configData.officials.githubLink,
                "github",
              );
            }
            if (configData.officials.websiteLink) {
              addLinkButton(
                officialLinks,
                "Web-Site",
                configData.officials.websiteLink,
                "web",
              );
            }
          } else {
            addLinkButton(
              officialLinks,
              "GitHub",
              projectInfo.config.url,
              "github",
            );
          }
        }

        const socialLinks = document.getElementById("social-links");
        if (socialLinks) {
          socialLinks.innerHTML = "";
          if (configData && configData.socialLinks) {
            if (configData.socialLinks.twitter) {
              addLinkButton(
                socialLinks,
                "Twitter",
                configData.socialLinks.twitter,
                "twitter",
              );
            }
            if (configData.socialLinks.telegram) {
              addLinkButton(
                socialLinks,
                "Telegram",
                configData.socialLinks.telegram,
                "telegram",
              );
            }
            if (configData.socialLinks.discord) {
              addLinkButton(
                socialLinks,
                "Discord",
                configData.socialLinks.discord,
                "discord",
              );
            }
          }
        }

        const links = document.getElementById("links");
        if (links) {
          links.innerHTML = "";
          if (configData && configData.officials) {
            if (configData.officials.websiteLink) {
              const websiteLink = document.createElement("a");
              websiteLink.href = configData.officials.websiteLink;
              websiteLink.target = "_blank";
              websiteLink.rel = "noopener noreferrer";

              const websiteIcon = document.createElement("img");
              websiteIcon.src = "/icons/logos/web.svg";
              websiteIcon.alt = "Website";
              websiteIcon.className = "w-6 h-6";

              websiteLink.appendChild(websiteIcon);
              links.appendChild(websiteLink);
            }

            if (configData.officials.githubLink) {
              const githubLink = document.createElement("a");
              githubLink.href = configData.officials.githubLink;
              githubLink.target = "_blank";
              githubLink.rel = "noopener noreferrer";

              const githubIcon = document.createElement("img");
              githubIcon.src = "/icons/logos/github.svg";
              githubIcon.alt = "Website";
              githubIcon.className = "w-5 h-5";

              githubLink.appendChild(githubIcon);
              links.appendChild(githubLink);
            }
          } else {
            const githubLink = document.createElement("a");
            githubLink.href = projectInfo.config.url;
            githubLink.target = "_blank";
            githubLink.rel = "noopener noreferrer";

            const githubIcon = document.createElement("img");
            githubIcon.src = "/icons/logos/github.svg";
            githubIcon.alt = "Website";
            githubIcon.className = "w-5 h-5";

            githubLink.appendChild(githubIcon);
            links.appendChild(githubLink);
          }

          if (configData && configData.socialLinks) {
            Object.entries(configData.socialLinks).forEach(
              ([socialName, socialLink]) => {
                if (socialLink) {
                  const linkElement = document.createElement("a");
                  linkElement.href = socialLink;
                  linkElement.target = "_blank";
                  linkElement.rel = "noopener noreferrer";

                  const iconElement = document.createElement("img");
                  iconElement.src = `/icons/logos/${socialName}.svg`;
                  iconElement.alt = socialName;
                  iconElement.className = "w-6 h-6";

                  linkElement.appendChild(iconElement);
                  links.appendChild(linkElement);
                }
              },
            );
          }
        }

        const syncStatusContainer = document.getElementById(
          "project-sync-status",
        );
        if (syncStatusContainer) {
          syncStatusContainer.innerHTML = "";

          // Add configuration badge
          const projectConfigHash = projectInfo.config.hash;
          if (!projectConfigHash || typeof projectConfigHash !== "string") {
            alert("Error: Invalid project configuration hash");
            return;
          }

          let tomlFileHash = await getTOMLFileHash(projectInfo.config.url);

          const configComponent = document.createElement("div");
          configComponent.className =
            "flex items-center space-x-2 rounded-full relative group";

          const icon = document.createElement("img");
          icon.className = "w-5 h-5";

          const text = document.createElement("span");
          text.className = "text-sm sm:text-base";
          text.textContent = "Configuration";

          if (tomlFileHash && projectConfigHash === tomlFileHash) {
            icon.src = "/icons/check.svg";
            icon.alt = "Check";
          } else {
            icon.src = "/icons/failed.svg";
            icon.alt = "Failed";
          }

          const popup = document.createElement("div");
          popup.className =
            "absolute bottom-full left-1/2 sm:left-1/4 transform -translate-x-1/2 mb-2 p-2 bg-black text-white rounded hidden group-hover:inline";
          if (tomlFileHash && projectConfigHash === tomlFileHash) {
            popup.innerHTML =
              '<p class="text-sm w-36 sm:w-max"><a href="https://tansu.dev/docs/project_information_file" target="_blank" class="underline text-blue-400">tansu.toml</a> on-chain hash matches the hash of the file on GitHub</p>';
          } else if (tomlFileHash) {
            popup.innerHTML =
              '<p class="text-sm w-36 sm:w-max"><a href="https://tansu.dev/docs/project_information_file" target="_blank" class="underline text-blue-400">tansu.toml</a> on-chain hash does not match the hash of the file on GitHub</p>';
          } else {
            popup.innerHTML =
              '<p class="text-sm w-36 sm:w-max"><a href="https://tansu.dev/docs/project_information_file" target="_blank" class="underline text-blue-400">tansu.toml</a> not found on GitHub</p>';
          }

          const triangle = document.createElement("div");
          triangle.className =
            "absolute -bottom-2 left-1/2 transform -translate-x-1/2 w-0 h-0 border-l-8 border-r-8 border-t-8 border-l-transparent border-r-transparent border-t-black";
          popup.appendChild(triangle);

          configComponent.appendChild(icon);
          configComponent.appendChild(text);
          configComponent.appendChild(popup);

          syncStatusContainer.appendChild(configComponent);

          // Add commit badge
          const latestSha = loadProjectLatestSha();
          const commitComponent = document.createElement("div");
          commitComponent.className =
            "flex items-center space-x-2 rounded-full relative group";

          const commitIcon = document.createElement("img");
          commitIcon.className = "w-5 h-5";

          const commitText = document.createElement("span");
          commitText.className = "text-sm sm:text-base";
          commitText.textContent = "Commit";

          const commitPopup = document.createElement("div");
          commitPopup.className =
            "absolute bottom-full left-1/2 sm:left-1/4 transform -translate-x-1/2 mb-2 p-2 bg-black text-white rounded hidden group-hover:inline";

          const commitTriangle = document.createElement("div");
          commitTriangle.className =
            "absolute -bottom-2 left-1/2 transform -translate-x-1/2 w-0 h-0 border-l-8 border-r-8 border-t-8 border-l-transparent border-r-transparent border-t-black";

          try {
            if (projectInfo.config.url && latestSha) {
              const latestCommit = await getLatestCommitData(
                projectInfo.config.url,
                latestSha,
              );

              if (
                latestCommit &&
                latestCommit.sha &&
                latestCommit.sha === latestSha
              ) {
                commitIcon.src = "/icons/check.svg";
                commitIcon.alt = "Check";
                commitPopup.innerHTML =
                  '<p class="text-sm w-36 sm:w-max">Latest SHA on-chain exists on GitHub</p>';
              } else {
                commitIcon.src = "/icons/check.svg";
                commitIcon.alt = "Failed";
                commitPopup.innerHTML =
                  '<p class="text-sm w-36 sm:w-max">Latest SHA on-chain cannot be found on GitHub</p>';
              }
            } else {
              commitIcon.src = "/icons/failed.svg";
              commitIcon.alt = "Failed";
              commitPopup.innerHTML =
                '<p class="text-sm w-36 sm:w-max">Latest SHA on-chain cannot be found on GitHub</p>';
            }
          } catch (error) {
            commitIcon.src = "/icons/failed.svg";
            commitIcon.alt = "Failed";
            commitPopup.innerHTML =
              '<p class="text-sm w-36 sm:w-max">Latest SHA on-chain cannot be found on GitHub</p>';
          }

          commitPopup.appendChild(commitTriangle);
          commitComponent.appendChild(commitIcon);
          commitComponent.appendChild(commitText);
          commitComponent.appendChild(commitPopup);

          syncStatusContainer.appendChild(commitComponent);
        }

        // Update modal content
        const modalProjectName = document.getElementById(
          "update-modal-project-name",
        );
        if (modalProjectName) {
          modalProjectName.textContent = projectInfo.name;
        }

        const modalMaintainers = document.getElementById(
          "modal-maintainers",
        ) as HTMLInputElement;
        if (modalMaintainers) {
          modalMaintainers.value = projectInfo.maintainers.join(",");
        }
        const modalConfigUrl = document.getElementById(
          "modal-config-url",
        ) as HTMLInputElement;
        if (modalConfigUrl) {
          modalConfigUrl.value = projectInfo.config.url;
        }
        const modalConfigHash = document.getElementById(
          "modal-config-hash",
        ) as HTMLInputElement;
        if (modalConfigHash) {
          modalConfigHash.value = projectInfo.config.hash;
        }

        // Read more modal content
        const readMoreModal = document.getElementById("read-more-modal");
        if (readMoreModal) {
          console.log(configData);
          const projectNameContainer =
            readMoreModal.querySelector(".project-name");
          if (projectNameContainer)
            projectNameContainer.textContent = projectInfo.name;
          const projectDescContainer = readMoreModal.querySelector(
            ".project-description",
          );
          if (projectDescContainer && configData)
            projectDescContainer.textContent = configData.description;

          const projectThumbnail = readMoreModal.querySelector(
            ".project-thumbnail",
          ) as HTMLImageElement | null;
          if (projectThumbnail) {
            if (configData && configData.logoImageLink) {
              projectThumbnail.src =
                convertGitHubLink(configData.logoImageLink) ||
                "/fallback-image.jpg";
            } else projectThumbnail.src = "/fallback-image.jpg";
          }
        }

        //Support modal content
        const loadedName = loadProjectName();
        if (loadedName) {
          const projectNameSpan = document.getElementById("contribute-text");
          if (projectNameSpan) {
            projectNameSpan.innerHTML = `Contribute to <span id="project-name">${loadedName}</span>.xlm`;
          }

          const donateTipPopup = document.getElementById("donate-tip-popup");
          if (donateTipPopup) {
            donateTipPopup.innerHTML = `Help us run the Tansu platform sustainability
                <div class="absolute -bottom-1 left-1/2 transform -translate-x-1/2 w-0 h-0 border-l-4 border-r-4 border-t-4 border-transparent border-t-zinc-800"></div>`;
          }
        }
      }
    }

    function updateUpgradeConfigButtonVisibility() {
      const projectInfo = loadProjectInfo();

      if (projectInfo) {
        const connectedPublicKey = loadedPublicKey();
        const isMaintainer = connectedPublicKey
          ? projectInfo.maintainers.includes(connectedPublicKey)
          : false;
        const updateConfigButton = document.getElementById(
          "open-update-config-modal-button",
        );
        if (updateConfigButton) {
          updateConfigButton.classList.toggle("hidden", !isMaintainer);
        }
      }
    }

    projectInfoLoaded.subscribe((loaded) => {
      if (loaded) {
        updateProjectInfo();
        updateUpgradeConfigButtonVisibility();
      }
    });

    const button = document.querySelector(
      "[data-update-config]",
    ) as HTMLButtonElement;
    if (button) {
      button.addEventListener("click", async () => {
        modal.showModal();
      });
    }

    const updateConfigButton = document.getElementById("update-config-button");
    const updateConfigLoader = document.getElementById("update-config-loader");
    if (updateConfigButton && updateConfigLoader) {
      updateConfigButton.addEventListener("click", async () => {
        const modalMaintainers = (
          document.getElementById("modal-maintainers") as HTMLInputElement
        ).value;
        const modalConfigUrl = (
          document.getElementById("modal-config-url") as HTMLInputElement
        ).value;
        const modalConfigHash = (
          document.getElementById("modal-config-hash") as HTMLInputElement
        ).value;

        updateConfigLoader.style.display = "inline-flex";

        try {
          const updateStatus = await updateConfig(
            modalMaintainers,
            modalConfigUrl,
            modalConfigHash,
          );

          if (updateStatus.data && !updateStatus.error) {
            const res = await getProject();
            const project = res.data;
            if (
              project &&
              project.name &&
              project.config &&
              project.maintainers
            ) {
              setProject(project);
            } else if (res.error) {
              alert(res.errorMessage);
            }
            updateProjectInfo();
            (
              document.getElementById(
                "update-config-modal",
              ) as HTMLDialogElement
            ).close();
          } else if (updateStatus.error) {
            alert(updateStatus.errorMessage);
          }
        } catch (error) {
          console.error("Error updating config:", error);
          alert(
            "An error occurred while updating the project configuration. Please try again.",
          );
        } finally {
          updateConfigLoader.style.display = "none";
        }
      });
    }

    const supportButton = document.querySelector("[data-donate-modal]");
    const donateModal = document.getElementById("donate-modal");

    if (supportButton && donateModal) {
      supportButton.addEventListener("click", () => {
        donateModal.classList.remove("hidden");
        donateModal.classList.add("flex");
      });
    }

    window.addEventListener("walletConnected", (_event: Event) => {
      updateUpgradeConfigButtonVisibility();
    });

    function addLinkButton(
      container: HTMLElement,
      title: string,
      url: string,
      iconName: string,
    ) {
      const button = document.createElement("a");
      button.href = url;
      button.target = "_blank";
      button.rel = "noopener noreferrer";
      button.className = "flex items-center space-x-[10px]";

      const icon = document.createElement("img");
      icon.src = getIconSVG(iconName);
      icon.alt = iconName;
      icon.className = "w-4 h-4";

      const text = document.createElement("span");
      text.className = "leading-5 text-xl text-[#311255]";
      text.textContent = title;

      button.appendChild(icon);
      button.appendChild(text);
      container.appendChild(button);
    }

    function getIconSVG(iconName: string) {
      const icons: { [key: string]: string } = {
        web: "/icons/logos/web.svg",
        github: "/icons/logos/github.svg",
        twitter: "/icons/logos/twitter-x.svg",
        telegram: "/icons/logos/telegram.svg",
        discord: "/icons/logos/discord.svg",
      };
      return icons[iconName] || "";
    }

    const proposalsButton = document.getElementById("go-to-proposals-button");
    if (proposalsButton) {
      proposalsButton.addEventListener("click", () => {
        if (projectInfo) {
          const name = projectInfo.name;
          window.location.href = `/governance?name=${name}`;
        }
      });
    }
  });
</script>
