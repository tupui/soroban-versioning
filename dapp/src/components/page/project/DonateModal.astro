---
import Modal from "components/utils/Modal.astro";
import Tooltip from "components/utils/Tooltip.astro";
---

<Modal id="donate-modal">
  <div class="p-4 lg:p-9 w-[342px] lg:w-[1048px] flex items-start gap-[18px]">
    <img src="/images/heart.svg" />
    <div class="flex-grow flex flex-col gap-9">
      <div class="flex flex-col gap-3">
        <h6 class="text-2xl font-medium text-primary">Support</h6>
        <p class="text-base text-secondary">
          Help bring this project to life with your contribution.
        </p>
      </div>
      <div class="flex flex-col gap-[18px]">
        <p class="text-base font-[600] text-primary">Contribute</p>
        <div
          id="amount-input-container"
          class="w-full flex-grow flex border border-[#978AA1]"
        >
          <input
            id="amount-input"
            class="flex-grow p-[18px] outline-none"
            placeholder="Enter the amount"
          />
          <div class="px-[18px] flex items-center">
            <p class="text-xl text-primary">XLM</p>
          </div>
        </div>
        <div class="w-full grid grid-cols-3">
          <button
            class="amount-button py-[11px] flex justify-center items-center leading-5 text-xl text-primary border border-r-0 border-[#FFB21E]"
            data-amount="10"
          >
            10 XLM
          </button>
          <button
            class="amount-button py-[11px] flex justify-center items-center leading-5 text-xl text-primary border border-r-0 border-[#FFB21E]"
            data-amount="100"
          >
            100 XLM
          </button>
          <button
            class="amount-button py-[11px] flex justify-center items-center leading-5 text-xl text-primary border border-[#FFB21E]"
            data-amount="1000"
          >
            1000 XLM
          </button>
        </div>
        <div class="flex gap-3">
          <p class="text-base text-tertiary">Minimum amount:</p>
          <p class="text-base font-[600] text-primary">1 XLM</p>
        </div>
      </div>
      <div class="flex flex-col gap-3">
        <p class="text-base font-[600] text-primary">
          Say Something to Support the Project (optional)
        </p>
        <textarea
          id="donate-message"
          class="p-[18px] w-full border border-[#978AA1] outline-none"
          placeholder="Write your message here"></textarea>
      </div>
      <div class="flex flex-col gap-3">
        <div class="flex items-center gap-3">
          <p class="text-base font-[600] text-primary">
            Platform trip (optional)
          </p>
          <Tooltip text="Help us run the Tansu platform sustainability">
            <img src="/icons/info.svg" />
          </Tooltip>
        </div>
        <div class="flex border border-[#978AA1]">
          <input
            id="tip-amount-input"
            class="flex-grow p-[18px] outline-none"
            placeholder="Enter the amount"
          />
          <div class="px-[18px] flex items-center">
            <p class="text-xl text-primary">XLM</p>
          </div>
        </div>
      </div>
      <div class="flex justify-end gap-[18px]">
        <button
          class="w-[220px] h-[56px] bg-[#F5F1F9] text-primary"
          onclick="this.closest('dialog').close()"
        >
          Cancel
        </button>
        <button
          id="contribute-button"
          class="w-[220px] h-[56px] bg-primary text-white"
        >
          Contribute
        </button>
      </div>
    </div>
  </div>
</Modal>

<script>
  import { loadProjectName } from "@service/StateService";
  import { sendXLM } from "../../../service/PaymentService";
  import { getAddressFromDomain } from "../../../service/SorobanDomainContractService";

  document.addEventListener("astro:page-load", () => {
    const amountInputContainer = document.getElementById(
      "amount-input-container",
    );
    const amountInput = document.getElementById(
      "amount-input",
    ) as HTMLInputElement;
    const platformTipInput = document.getElementById(
      "tip-amount-input",
    ) as HTMLInputElement;

    let amount = 10;

    const amountButtons = document.querySelectorAll(".amount-button");

    const updateButtonStatus = (activeIndex?: number) => {
      amountButtons.forEach((btn, index) => {
        if (index == activeIndex) {
          btn.classList.add("bg-[#FFB21E]", "text-white");
          btn.classList.remove("text-primary");
        } else {
          btn.classList.remove("bg-[#FFB21E]", "text-white");
          btn.classList.add("text-primary");
        }
      });
    };

    amountInput.addEventListener("input", () => {
      amount = Number(amountInput.value);
      updateButtonStatus();
    });

    amountButtons.forEach((button, index) => {
      button.addEventListener("click", () => {
        amount = Number(button.getAttribute("data-amount"));
        updateButtonStatus(index);
      });
    });

    const modal = document.getElementById("donate-modal") as HTMLDialogElement;

    const contributeButton = document.getElementById("contribute-button");
    if (contributeButton) {
      contributeButton.addEventListener("click", async () => {
        const donateMessage = (
          document.getElementById("donate-message") as HTMLTextAreaElement
        ).value;

        const tipAmount = platformTipInput.value;

        if (amount < 1) {
          if (amountInputContainer) {
            amountInputContainer.classList.remove("border-[#978AA1]");
            amountInputContainer.classList.add("border-red");
            setTimeout(() => {
              amountInputContainer.classList.add("border-[#978AA1]");
              amountInputContainer.classList.remove("border-red");
            }, 2500);
          }
          return;
        }

        try {
          const projectName = loadProjectName();
          const domainInfo = await getAddressFromDomain(projectName || "");

          const domainOwnerAddress = domainInfo.value.address;
          const payment = await sendXLM(
            amount.toString(),
            domainOwnerAddress as string,
            tipAmount.toString(),
            donateMessage,
          );
          if (payment) {
            alert("You successfully donated.");
            if (modal) {
              modal.classList.add("hidden");
            }
          } else {
            alert("Donation failed.");
          }
        } catch (err: any) {
          console.error(err.message);
          alert(`Error occurred: ${err.message}`);
        } finally {
        }
      });
    }

    const cancelButton = document.getElementById("cancel-button");
    if (cancelButton) {
      modal.close();
    }

    // Function to allow only positive integers
    const allowOnlyPositiveIntegers = (event: KeyboardEvent) => {
      if (
        !/[0-9]/.test(event.key) &&
        event.key !== "Backspace" &&
        event.key !== "Delete" &&
        event.key !== "ArrowLeft" &&
        event.key !== "ArrowRight"
      ) {
        event.preventDefault();
      }
    };

    // Add event listeners to both input fields
    [amountInput, platformTipInput].forEach((input) => {
      input.addEventListener("keydown", allowOnlyPositiveIntegers);
      input.addEventListener("input", () => {
        input.value = input.value.replace(/[^0-9]/g, "");
      });
    });
  });
</script>
