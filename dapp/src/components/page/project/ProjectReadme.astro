---
import { ClipboardIcon, LinkIcon } from "components/icons";
import ReadmeViewer from "./ReadmeViewer.tsx";
---

<div class="relative flex flex-col items-center">
  <div class="flex flex-col gap-[30px]">
    <div class="flex gap-[18px]">
      <button
        id="copy-repo-link"
        class="p-[18px_30px] border border-[#4C4354] flex gap-3"
      >
        <ClipboardIcon />
        <span id="copy-repo-text" class="leading-5 text-xl text-[#311255]">
          Clone Repository
        </span>
      </button>
      <a
        id="move-to-releases"
        class="p-[18px_30px] border border-[#4C4354] flex gap-3"
      >
        <LinkIcon />
        <span class="leading-5 text-xl text-[#311255] cursor-pointer">
          Go to Releases
        </span>
      </a>
    </div>
    <ReadmeViewer client:load />
  </div>
</div>

<script>
  import { loadProjectInfo } from "../../../service/StateService";
  import { projectInfoLoaded } from "../../../utils/store";
  document.addEventListener("astro:page-load", () => {
    async function updateProjectInfo() {
      const projectInfo = loadProjectInfo();
      if (projectInfo) {
        const repositoryUrl = projectInfo.config.url;
        const copyRepoLink = document.getElementById("copy-repo-link");
        const copyRepoText = document.getElementById("copy-repo-text");

        if (copyRepoLink && copyRepoText) {
          copyRepoLink.addEventListener("click", async () => {
            try {
              await navigator.clipboard.writeText(repositoryUrl);
              copyRepoText.textContent = "Copied";
              setTimeout(() => {
                copyRepoText.textContent = "Clone repository";
              }, 2000);
            } catch (error) {
              console.error("Failed to copy: ", error);
            }
          });
        }

        const moveToReleases = document.getElementById("move-to-releases");
        if (moveToReleases) {
          moveToReleases.addEventListener("click", () => {
            const releasesUrl = `${repositoryUrl}/releases`;
            window.open(releasesUrl, "_blank");
          });
        }
      }
    }

    projectInfoLoaded.subscribe((loaded) => {
      if (loaded) {
        updateProjectInfo();
      }
    });
  });
</script>
